# HG changeset patch
# Parent 9bde0d25d76e4ef301668a8016f6edcba1662826
# User Chris Coulson <chris.coulson@canonical.com>
Bug 716467 - Don't call g_settings_new each time we look up system proxy settings

diff --git a/toolkit/system/unixproxy/nsUnixSystemProxySettings.cpp b/toolkit/system/unixproxy/nsUnixSystemProxySettings.cpp
--- a/toolkit/system/unixproxy/nsUnixSystemProxySettings.cpp
+++ b/toolkit/system/unixproxy/nsUnixSystemProxySettings.cpp
@@ -45,74 +45,78 @@
 #include "nsReadableUtils.h"
 #include "nsArrayUtils.h"
 #include "prnetdb.h"
 #include "prenv.h"
 #include "nsPrintfCString.h"
 #include "nsNetUtil.h"
 #include "nsISupportsPrimitives.h"
 #include "nsIGSettingsService.h"
+#include "nsInterfaceHashtable.h"
 
 class nsUnixSystemProxySettings : public nsISystemProxySettings {
 public:
   NS_DECL_ISUPPORTS
   NS_DECL_NSISYSTEMPROXYSETTINGS
 
   nsUnixSystemProxySettings() {}
   nsresult Init();
 
 private:
   ~nsUnixSystemProxySettings() {}
   
   nsCOMPtr<nsIGConfService> mGConf;
   nsCOMPtr<nsIGSettingsService> mGSettings;
+  nsCOMPtr<nsIGSettingsCollection> mProxySettings;
+  nsInterfaceHashtable<nsCStringHashKey, nsIGSettingsCollection> mSchemeProxySettings;
   bool IsProxyMode(const char* aMode);
   nsresult SetProxyResultFromGConf(const char* aKeyBase, const char* aType, nsACString& aResult);
   nsresult GetProxyFromGConf(const nsACString& aScheme, const nsACString& aHost, PRInt32 aPort, nsACString& aResult);
   nsresult GetProxyFromGSettings(const nsACString& aScheme, const nsACString& aHost, PRInt32 aPort, nsACString& aResult);
   nsresult SetProxyResultFromGSettings(const char* aKeyBase, const char* aType, nsACString& aResult);
 };
 
 NS_IMPL_ISUPPORTS1(nsUnixSystemProxySettings, nsISystemProxySettings)
 
 nsresult
 nsUnixSystemProxySettings::Init()
 {
+  mSchemeProxySettings.Init(5);
   mGConf = do_GetService(NS_GCONFSERVICE_CONTRACTID);
   mGSettings = do_GetService(NS_GSETTINGSSERVICE_CONTRACTID);
+  if (mGSettings) {
+    mGSettings->GetCollectionForSchema(NS_LITERAL_CSTRING("org.gnome.system.proxy"),
+                                       getter_AddRefs(mProxySettings));
+  }
+
   return NS_OK;
 }
 
 bool
 nsUnixSystemProxySettings::IsProxyMode(const char* aMode)
 {
   nsCAutoString mode;
   return NS_SUCCEEDED(mGConf->GetString(NS_LITERAL_CSTRING("/system/proxy/mode"), mode)) &&
          mode.EqualsASCII(aMode);
 }
 
 nsresult
 nsUnixSystemProxySettings::GetPACURI(nsACString& aResult)
 {
-  if (mGSettings) {
-    nsCOMPtr<nsIGSettingsCollection> proxy_settings;
-    mGSettings->GetCollectionForSchema(NS_LITERAL_CSTRING("org.gnome.system.proxy"), 
-                                       getter_AddRefs(proxy_settings));
-    if (proxy_settings) {
-      nsCString proxyMode;
-      // Check if mode is auto
-      nsresult rv = proxy_settings->GetString(NS_LITERAL_CSTRING("mode"), proxyMode);
-      if (rv == NS_OK && proxyMode.Equals("auto")) {
-        return proxy_settings->GetString(NS_LITERAL_CSTRING("autoconfig-url"), aResult);
-      }
-      /* The org.gnome.system.proxy schema has been found, but auto mode is not set.
-       * Don't try the GConf and return empty string. */
-      aResult.Truncate();
-      return NS_OK;
+  if (mProxySettings) {
+    nsCString proxyMode;
+    // Check if mode is auto
+    nsresult rv = mProxySettings->GetString(NS_LITERAL_CSTRING("mode"), proxyMode);
+    if (rv == NS_OK && proxyMode.Equals("auto")) {
+      return mProxySettings->GetString(NS_LITERAL_CSTRING("autoconfig-url"), aResult);
     }
+    /* The org.gnome.system.proxy schema has been found, but auto mode is not set.
+     * Don't try the GConf and return empty string. */
+    aResult.Truncate();
+    return NS_OK;
   }
 
   if (mGConf && IsProxyMode("auto")) {
     return mGConf->GetString(NS_LITERAL_CSTRING("/system/proxy/autoconfig_url"),
                              aResult);
   }
   // Return an empty string when auto mode is not set.
   aResult.Truncate();
@@ -261,20 +265,26 @@ nsUnixSystemProxySettings::SetProxyResul
   SetProxyResult(aType, host, port, aResult);
   return NS_OK;
 }
 
 nsresult
 nsUnixSystemProxySettings::SetProxyResultFromGSettings(const char* aKeyBase, const char* aType,
                                                        nsACString& aResult)
 {
-  nsCOMPtr<nsIGSettingsCollection> proxy_settings;
-  nsresult rv = mGSettings->GetCollectionForSchema(nsDependentCString(aKeyBase),
-                                                   getter_AddRefs(proxy_settings));
-  NS_ENSURE_SUCCESS(rv, rv);
+  nsDependentCString key(aKeyBase);
+
+  nsCOMPtr<nsIGSettingsCollection> proxy_settings = mSchemeProxySettings.Get(key);
+  nsresult rv;
+  if (!proxy_settings) {
+    rv = mGSettings->GetCollectionForSchema(key, getter_AddRefs(proxy_settings));
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    mSchemeProxySettings.Put(key, proxy_settings);
+  }
 
   nsCAutoString host;
   rv = proxy_settings->GetString(NS_LITERAL_CSTRING("host"), host);
   NS_ENSURE_SUCCESS(rv, rv);
   if (host.IsEmpty())
     return NS_ERROR_FAILURE;
   
   PRInt32 port;
@@ -446,35 +456,27 @@ nsUnixSystemProxySettings::GetProxyFromG
 }
 
 nsresult
 nsUnixSystemProxySettings::GetProxyFromGSettings(const nsACString& aScheme,
                                                  const nsACString& aHost,
                                                  PRInt32 aPort,
                                                  nsACString& aResult)
 {
-  nsCOMPtr<nsIGSettingsCollection> proxy_settings;
-  nsresult rv;
-
-  rv = mGSettings->GetCollectionForSchema(NS_LITERAL_CSTRING("org.gnome.system.proxy"),
-                                          getter_AddRefs(proxy_settings));
-  if (NS_FAILED(rv))
-    return rv;
-
   nsCString proxyMode; 
-  rv = proxy_settings->GetString(NS_LITERAL_CSTRING("mode"), proxyMode);
+  nsresult rv = mProxySettings->GetString(NS_LITERAL_CSTRING("mode"), proxyMode);
   NS_ENSURE_SUCCESS(rv, rv);
   
   if (!proxyMode.Equals("manual")) {
     aResult.AppendLiteral("DIRECT");
     return NS_OK;
   }
 
   nsCOMPtr<nsIArray> ignoreList;
-  if (NS_SUCCEEDED(proxy_settings->GetStringList(NS_LITERAL_CSTRING("ignore-hosts"),
+  if (NS_SUCCEEDED(mProxySettings->GetStringList(NS_LITERAL_CSTRING("ignore-hosts"),
                                                  getter_AddRefs(ignoreList))) && ignoreList) {
     PRUint32 len = 0;
     ignoreList->GetLength(&len);
     for (PRUint32 i = 0; i < len; ++i) {
       nsCOMPtr<nsISupportsCString> str = do_QueryElementAt(ignoreList, i);
       if (str) {
         nsCString s;
         if (NS_SUCCEEDED(str->GetData(s)) && !s.IsEmpty()) {
@@ -521,17 +523,17 @@ nsUnixSystemProxySettings::GetProxyForUR
   nsCAutoString host;
   rv = aURI->GetHost(host);
   NS_ENSURE_SUCCESS(rv, rv);
 
   PRInt32 port;
   rv = aURI->GetPort(&port);
   NS_ENSURE_SUCCESS(rv, rv);
 
-  if (mGSettings) {
+  if (mProxySettings) {
     rv = GetProxyFromGSettings(scheme, host, port, aResult);
     if (rv == NS_OK)
       return rv;
   }
   if (mGConf)
     return GetProxyFromGConf(scheme, host, port, aResult);
 
   return GetProxyFromEnvironment(scheme, host, port, aResult);
