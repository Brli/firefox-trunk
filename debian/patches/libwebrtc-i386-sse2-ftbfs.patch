Description: Disable SSE/SSE2 code paths in libwebrtc when building on i386,
 because it's not available at build time. This is Debian/Ubuntu specific.
Author: Olivier Tilloy <olivier.tilloy@canonical.com>
Forwarded: not-needed

--- a/third_party/libwebrtc/modules/audio_processing/aec3/adaptive_fir_filter.cc
+++ b/third_party/libwebrtc/modules/audio_processing/aec3/adaptive_fir_filter.cc
@@ -88,7 +88,7 @@ void ComputeFrequencyResponse_Neon(
 }
 #endif
 
-#if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(WEBRTC_ARCH_X86_FAMILY) && defined(__SSE2__)
 // Computes and stores the frequency response of the filter.
 void ComputeFrequencyResponse_Sse2(
     size_t num_partitions,
@@ -212,7 +212,7 @@ void AdaptPartitions_Neon(const RenderBu
 }
 #endif
 
-#if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(WEBRTC_ARCH_X86_FAMILY) && defined(__SSE2__)
 // Adapts the filter partitions. (SSE2 variant)
 void AdaptPartitions_Sse2(const RenderBuffer& render_buffer,
                           const FftData& G,
@@ -377,7 +377,7 @@ void ApplyFilter_Neon(const RenderBuffer
 }
 #endif
 
-#if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(WEBRTC_ARCH_X86_FAMILY) && defined(__SSE2__)
 // Produces the filter output (SSE2 variant).
 void ApplyFilter_Sse2(const RenderBuffer& render_buffer,
                       size_t num_partitions,
@@ -557,9 +557,11 @@ void AdaptiveFirFilter::Filter(const Ren
   RTC_DCHECK(S);
   switch (optimization_) {
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
     case Aec3Optimization::kSse2:
       aec3::ApplyFilter_Sse2(render_buffer, current_size_partitions_, H_, S);
       break;
+#endif
     case Aec3Optimization::kAvx2:
       aec3::ApplyFilter_Avx2(render_buffer, current_size_partitions_, H_, S);
       break;
@@ -601,9 +603,11 @@ void AdaptiveFirFilter::ComputeFrequency
 
   switch (optimization_) {
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
     case Aec3Optimization::kSse2:
       aec3::ComputeFrequencyResponse_Sse2(current_size_partitions_, H_, H2);
       break;
+#endif
     case Aec3Optimization::kAvx2:
       aec3::ComputeFrequencyResponse_Avx2(current_size_partitions_, H_, H2);
       break;
@@ -626,10 +630,12 @@ void AdaptiveFirFilter::AdaptAndUpdateSi
   // Adapt the filter.
   switch (optimization_) {
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
     case Aec3Optimization::kSse2:
       aec3::AdaptPartitions_Sse2(render_buffer, G, current_size_partitions_,
                                  &H_);
       break;
+#endif
     case Aec3Optimization::kAvx2:
       aec3::AdaptPartitions_Avx2(render_buffer, G, current_size_partitions_,
                                  &H_);
--- a/third_party/libwebrtc/modules/audio_processing/aec3/adaptive_fir_filter.h
+++ b/third_party/libwebrtc/modules/audio_processing/aec3/adaptive_fir_filter.h
@@ -38,10 +38,12 @@ void ComputeFrequencyResponse_Neon(
     std::vector<std::array<float, kFftLengthBy2Plus1>>* H2);
 #endif
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
 void ComputeFrequencyResponse_Sse2(
     size_t num_partitions,
     const std::vector<std::vector<FftData>>& H,
     std::vector<std::array<float, kFftLengthBy2Plus1>>* H2);
+#endif
 
 void ComputeFrequencyResponse_Avx2(
     size_t num_partitions,
@@ -61,10 +63,12 @@ void AdaptPartitions_Neon(const RenderBu
                           std::vector<std::vector<FftData>>* H);
 #endif
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
 void AdaptPartitions_Sse2(const RenderBuffer& render_buffer,
                           const FftData& G,
                           size_t num_partitions,
                           std::vector<std::vector<FftData>>* H);
+#endif
 
 void AdaptPartitions_Avx2(const RenderBuffer& render_buffer,
                           const FftData& G,
@@ -84,10 +88,12 @@ void ApplyFilter_Neon(const RenderBuffer
                       FftData* S);
 #endif
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
 void ApplyFilter_Sse2(const RenderBuffer& render_buffer,
                       size_t num_partitions,
                       const std::vector<std::vector<FftData>>& H,
                       FftData* S);
+#endif
 
 void ApplyFilter_Avx2(const RenderBuffer& render_buffer,
                       size_t num_partitions,
--- a/third_party/libwebrtc/modules/audio_processing/aec3/adaptive_fir_filter_erl.cc
+++ b/third_party/libwebrtc/modules/audio_processing/aec3/adaptive_fir_filter_erl.cc
@@ -54,7 +54,7 @@ void ErlComputer_NEON(
 }
 #endif
 
-#if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(WEBRTC_ARCH_X86_FAMILY) && defined(__SSE2__)
 // Computes and stores the echo return loss estimate of the filter, which is the
 // sum of the partition frequency responses.
 void ErlComputer_SSE2(
@@ -82,9 +82,11 @@ void ComputeErl(const Aec3Optimization&
   // Update the frequency response and echo return loss for the filter.
   switch (optimization) {
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
     case Aec3Optimization::kSse2:
       aec3::ErlComputer_SSE2(H2, erl);
       break;
+#endif
     case Aec3Optimization::kAvx2:
       aec3::ErlComputer_AVX2(H2, erl);
       break;
--- a/third_party/libwebrtc/modules/audio_processing/aec3/adaptive_fir_filter_erl.h
+++ b/third_party/libwebrtc/modules/audio_processing/aec3/adaptive_fir_filter_erl.h
@@ -33,9 +33,11 @@ void ErlComputer_NEON(
     rtc::ArrayView<float> erl);
 #endif
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
 void ErlComputer_SSE2(
     const std::vector<std::array<float, kFftLengthBy2Plus1>>& H2,
     rtc::ArrayView<float> erl);
+#endif
 
 void ErlComputer_AVX2(
     const std::vector<std::array<float, kFftLengthBy2Plus1>>& H2,
--- a/third_party/libwebrtc/modules/audio_processing/aec3/vector_math.h
+++ b/third_party/libwebrtc/modules/audio_processing/aec3/vector_math.h
@@ -44,6 +44,7 @@ class VectorMath {
   void Sqrt(rtc::ArrayView<float> x) {
     switch (optimization_) {
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
       case Aec3Optimization::kSse2: {
         const int x_size = static_cast<int>(x.size());
         const int vector_limit = x_size >> 2;
@@ -59,6 +60,7 @@ class VectorMath {
           x[j] = sqrtf(x[j]);
         }
       } break;
+#endif
       case Aec3Optimization::kAvx2:
         SqrtAVX2(x);
         break;
@@ -124,6 +126,7 @@ class VectorMath {
     RTC_DCHECK_EQ(z.size(), y.size());
     switch (optimization_) {
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
       case Aec3Optimization::kSse2: {
         const int x_size = static_cast<int>(x.size());
         const int vector_limit = x_size >> 2;
@@ -140,6 +143,7 @@ class VectorMath {
           z[j] = x[j] * y[j];
         }
       } break;
+#endif
       case Aec3Optimization::kAvx2:
         MultiplyAVX2(x, y, z);
         break;
@@ -174,6 +178,7 @@ class VectorMath {
     RTC_DCHECK_EQ(z.size(), x.size());
     switch (optimization_) {
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
       case Aec3Optimization::kSse2: {
         const int x_size = static_cast<int>(x.size());
         const int vector_limit = x_size >> 2;
@@ -190,6 +195,7 @@ class VectorMath {
           z[j] += x[j];
         }
       } break;
+#endif
       case Aec3Optimization::kAvx2:
         AccumulateAVX2(x, z);
         break;
--- a/third_party/libwebrtc/modules/audio_processing/aec3/matched_filter.cc
+++ b/third_party/libwebrtc/modules/audio_processing/aec3/matched_filter.cc
@@ -142,7 +142,7 @@ void MatchedFilterCore_NEON(size_t x_sta
 
 #endif
 
-#if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(WEBRTC_ARCH_X86_FAMILY) && defined(__SSE2__)
 
 void MatchedFilterCore_AccumulatedError_SSE2(
     size_t x_start_index,
@@ -410,12 +410,14 @@ void MatchedFilter::Update(const Downsam
 
     switch (optimization_) {
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
       case Aec3Optimization::kSse2:
         aec3::MatchedFilterCore_SSE2(
             x_start_index, x2_sum_threshold, smoothing, render_buffer.buffer, y,
             filters_[n], &filters_updated, &error_sum, compute_pre_echo,
             instantaneous_accumulated_error_, scratch_memory_);
         break;
+#endif
       case Aec3Optimization::kAvx2:
         aec3::MatchedFilterCore_AVX2(
             x_start_index, x2_sum_threshold, smoothing, render_buffer.buffer, y,
--- a/third_party/libwebrtc/modules/audio_processing/aec3/fft_data.h
+++ b/third_party/libwebrtc/modules/audio_processing/aec3/fft_data.h
@@ -49,6 +49,7 @@ struct FftData {
     RTC_DCHECK_EQ(kFftLengthBy2Plus1, power_spectrum.size());
     switch (optimization) {
 #if defined(WEBRTC_ARCH_X86_FAMILY)
+#if defined(__SSE2__)
       case Aec3Optimization::kSse2: {
         constexpr int kNumFourBinBands = kFftLengthBy2 / 4;
         constexpr int kLimit = kNumFourBinBands * 4;
@@ -63,6 +64,7 @@ struct FftData {
         power_spectrum[kFftLengthBy2] = re[kFftLengthBy2] * re[kFftLengthBy2] +
                                         im[kFftLengthBy2] * im[kFftLengthBy2];
       } break;
+#endif
       case Aec3Optimization::kAvx2:
         SpectrumAVX2(power_spectrum);
         break;
--- a/third_party/libwebrtc/modules/audio_processing/aec3/matched_filter.h
+++ b/third_party/libwebrtc/modules/audio_processing/aec3/matched_filter.h
@@ -42,6 +42,7 @@ void MatchedFilterCore_NEON(size_t x_sta
 
 #if defined(WEBRTC_ARCH_X86_FAMILY)
 
+#if defined(__SSE2__)
 // Filter core for the matched filter that is optimized for SSE2.
 void MatchedFilterCore_SSE2(size_t x_start_index,
                             float x2_sum_threshold,
@@ -51,6 +52,7 @@ void MatchedFilterCore_SSE2(size_t x_sta
                             bool compute_accumulated_error,
                             rtc::ArrayView<float> accumulated_error,
                             rtc::ArrayView<float> scratch_memory);
+#endif
 
 // Filter core for the matched filter that is optimized for AVX2.
 void MatchedFilterCore_AVX2(size_t x_start_index,
--- a/third_party/libwebrtc/modules/audio_processing/agc2/rnn_vad/vector_math.h
+++ b/third_party/libwebrtc/modules/audio_processing/agc2/rnn_vad/vector_math.h
@@ -46,6 +46,7 @@ class VectorMath {
 #if defined(WEBRTC_ARCH_X86_FAMILY)
     if (cpu_features_.avx2) {
       return DotProductAvx2(x, y);
+#if defined(__SSE2__)
     } else if (cpu_features_.sse2) {
       __m128 accumulator = _mm_setzero_ps();
       constexpr int kBlockSizeLog2 = 2;
@@ -72,6 +73,7 @@ class VectorMath {
         dot_product += x[i] * y[i];
       }
       return dot_product;
+#endif
     }
 #elif defined(WEBRTC_HAS_NEON) && defined(WEBRTC_ARCH_ARM64)
     if (cpu_features_.neon) {
--- a/third_party/libwebrtc/third_party/pffft/src/pffft.c
+++ b/third_party/libwebrtc/third_party/pffft/src/pffft.c
@@ -94,7 +94,9 @@
 
 
 // define PFFFT_SIMD_DISABLE if you want to use scalar code instead of simd code
-//#define PFFFT_SIMD_DISABLE
+#if defined(__i386__)
+#define PFFFT_SIMD_DISABLE
+#endif
 
 /*
    Altivec support macros 
