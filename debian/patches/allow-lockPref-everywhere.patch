Description: Allow use of lockPref in all preference files
Author: Alexander Sack <asac@ubuntu.com>
Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=467738
Forwarded: https://bugzilla.mozilla.org/attachment.cgi?id=351145

Index: firefox-trunk-58.0~a1~hg20171110r391326/modules/libpref/Preferences.cpp
===================================================================
--- firefox-trunk-58.0~a1~hg20171110r391326.orig/modules/libpref/Preferences.cpp
+++ firefox-trunk-58.0~a1~hg20171110r391326/modules/libpref/Preferences.cpp
@@ -1185,7 +1185,8 @@
                     PrefValue aValue,
                     PrefType aType,
                     bool aIsDefault,
-                    bool aIsSticky)
+                    bool aIsSticky,
+                    bool aIsLocked)
 {
   uint32_t flags = 0;
   if (aIsDefault) {
@@ -1197,6 +1198,8 @@
     flags |= kPrefForceSet;
   }
   pref_SetPref(aPref, aValue, aType, flags);
+  if (aIsLocked)
+    PREF_LockPref(aPref, true);
 }
 
 //===========================================================================
@@ -1218,7 +1221,8 @@
                            PrefValue aValue,
                            PrefType aType,
                            bool aIsDefault,
-                           bool aIsSticky);
+                           bool aIsSticky,
+                           bool aIsLocked);
 
 // Report any errors or warnings we encounter during parsing.
 typedef void (*PrefParseErrorReporter)(const char* aMessage,
@@ -1246,6 +1250,7 @@
   PrefType mVtype;       // PREF_{STRING,INT,BOOL}
   bool mIsDefault;       // true if (default) pref
   bool mIsSticky;        // true if (sticky) pref
+  bool mIsLock;          // true if (locked) pref
 };
 
 // Pref parser states.
@@ -1275,6 +1280,7 @@
 #define BITS_PER_HEX_DIGIT 4
 
 static const char kUserPref[] = "user_pref";
+static const char kLockPref[] = "lockPref";
 static const char kPref[] = "pref";
 static const char kStickyPref[] = "sticky_pref";
 static const char kTrue[] = "true";
@@ -1422,6 +1428,7 @@
           aPS->mVtype = PrefType::Invalid;
           aPS->mIsDefault = false;
           aPS->mIsSticky = false;
+          aPS->mIsLock = false;
         }
         switch (c) {
           case '/': // begin comment block or line?
@@ -1432,11 +1439,14 @@
             break;
           case 'u': // indicating user_pref
           case 's': // indicating sticky_pref
+          case 'l': // indicating lockPref
           case 'p': // indicating pref
             if (c == 'u') {
               aPS->mStrMatch = kUserPref;
             } else if (c == 's') {
               aPS->mStrMatch = kStickyPref;
+            } else if (c == 'l') {
+              aPS->mStrMatch = kLockPref;
             } else {
               aPS->mStrMatch = kPref;
             }
@@ -1485,8 +1495,9 @@
       case PREF_PARSE_UNTIL_NAME:
         if (c == '\"' || c == '\'') {
           aPS->mIsDefault =
-            (aPS->mStrMatch == kPref || aPS->mStrMatch == kStickyPref);
+            (aPS->mStrMatch == kPref || aPS->mStrMatch == kStickyPref || aPS->mStrMatch == kLockPref);
           aPS->mIsSticky = (aPS->mStrMatch == kStickyPref);
+          aPS->mIsLock = (aPS->mStrMatch == kLockPref);
           aPS->mQuoteChar = c;
           aPS->mNextState = PREF_PARSE_UNTIL_COMMA; // return here when done
           state = PREF_PARSE_QUOTED_STRING;
@@ -1815,7 +1826,8 @@
                        value,
                        aPS->mVtype,
                        aPS->mIsDefault,
-                       aPS->mIsSticky);
+                       aPS->mIsSticky,
+                       aPS->mIsLock);
 
           state = PREF_PARSE_INIT;
         } else if (c == '/') {
