Description: Allow use of lockPref in all preference files
Author: Alexander Sack <asac@ubuntu.com>
Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=467738
Forwarded: https://bugzilla.mozilla.org/attachment.cgi?id=351145

Index: firefox-trunk-58.0~a1~hg20171016r386330/modules/libpref/Preferences.cpp
===================================================================
--- firefox-trunk-58.0~a1~hg20171016r386330.orig/modules/libpref/Preferences.cpp
+++ firefox-trunk-58.0~a1~hg20171016r386330/modules/libpref/Preferences.cpp
@@ -1346,7 +1346,8 @@
                     PrefValue aValue,
                     PrefType aType,
                     bool aIsDefault,
-                    bool aIsStickyDefault)
+                    bool aIsStickyDefault,
+                    bool aIsLocked)
 {
   uint32_t flags = 0;
   if (aIsDefault) {
@@ -1358,6 +1359,8 @@
     flags |= kPrefForceSet;
   }
   pref_HashPref(aPref, aValue, aType, flags);
+  if (aIsLocked)
+    PREF_LockPref(aPref, true);
 }
 
 //===========================================================================
@@ -1379,7 +1382,8 @@
                            PrefValue aValue,
                            PrefType aType,
                            bool aIsDefault,
-                           bool aIsStickyDefault);
+                           bool aIsStickyDefault,
+                           bool aIsLocked);
 
 // Report any errors or warnings we encounter during parsing.
 typedef void (*PrefParseErrorReporter)(const char* aMessage,
@@ -1407,6 +1411,7 @@
   PrefType mVtype;       // PREF_{STRING,INT,BOOL}
   bool mIsDefault;       // true if (default) pref
   bool mIsStickyDefault; // true if (sticky) pref
+  bool mIsLock;          // true if (locked) pref
 };
 
 // Pref parser states.
@@ -1436,6 +1441,7 @@
 #define BITS_PER_HEX_DIGIT 4
 
 static const char kUserPref[] = "user_pref";
+static const char kLockPref[] = "lockPref";
 static const char kPref[] = "pref";
 static const char kPrefSticky[] = "sticky_pref";
 static const char kTrue[] = "true";
@@ -1539,7 +1545,8 @@
                   value,
                   aPS->mVtype,
                   aPS->mIsDefault,
-                  aPS->mIsStickyDefault);
+                  aPS->mIsStickyDefault,
+                  aPS->mIsLock);
   return true;
 }
 
@@ -1626,6 +1633,7 @@
           aPS->mVtype = PrefType::Invalid;
           aPS->mIsDefault = false;
           aPS->mIsStickyDefault = false;
+          aPS->mIsLock = false;
         }
         switch (c) {
           case '/': // begin comment block or line?
@@ -1636,11 +1644,14 @@
             break;
           case 'u': // indicating user_pref
           case 's': // indicating sticky_pref
+          case 'l': // indicating lockPref
           case 'p': // indicating pref
             if (c == 'u') {
               aPS->mStrMatch = kUserPref;
             } else if (c == 's') {
               aPS->mStrMatch = kPrefSticky;
+            } else if (c == 'l') {
+              aPS->mStrMatch = kLockPref;
             } else {
               aPS->mStrMatch = kPref;
             }
@@ -1689,8 +1700,9 @@
       case PREF_PARSE_UNTIL_NAME:
         if (c == '\"' || c == '\'') {
           aPS->mIsDefault =
-            (aPS->mStrMatch == kPref || aPS->mStrMatch == kPrefSticky);
+            (aPS->mStrMatch == kPref || aPS->mStrMatch == kPrefSticky || aPS->mStrMatch == kLockPref);
           aPS->mIsStickyDefault = (aPS->mStrMatch == kPrefSticky);
+          aPS->mIsLock = (aPS->mStrMatch == kLockPref);
           aPS->mQuoteChar = c;
           aPS->mNextState = PREF_PARSE_UNTIL_COMMA; // return here when done
           state = PREF_PARSE_QUOTED_STRING;
