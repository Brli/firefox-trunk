---
 browser/components/shell/src/nsGNOMEShellService.cpp |   14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

Index: mozilla/browser/components/shell/src/nsGNOMEShellService.cpp
===================================================================
--- mozilla.orig/browser/components/shell/src/nsGNOMEShellService.cpp
+++ mozilla/browser/components/shell/src/nsGNOMEShellService.cpp
@@ -62,16 +62,18 @@
 #endif
 
 #include <glib.h>
 #include <glib-object.h>
 #include <gdk-pixbuf/gdk-pixbuf.h>
 #include <limits.h>
 #include <stdlib.h>
 
+#define SYSTEM_PATH_BUILD 1
+
 struct ProtocolAssociation
 {
   const char *name;
   PRBool essential;
 };
 
 struct MimeTypeAssociation
 {
@@ -135,17 +137,16 @@
   return appPath->GetNativePath(mAppPath);
 }
 
 NS_IMPL_ISUPPORTS1(nsGNOMEShellService, nsIShellService)
 
 PRBool
 nsGNOMEShellService::KeyMatchesAppName(const char *aKeyValue) const
 {
-
   gchar *commandPath;
   if (mUseLocaleFilenames) {
     gchar *nativePath = g_filename_from_utf8(aKeyValue, -1, NULL, NULL, NULL);
     if (!nativePath) {
       NS_ERROR("Error converting path to filesystem encoding");
       return PR_FALSE;
     }
 
@@ -153,19 +154,25 @@
     g_free(nativePath);
   } else {
     commandPath = g_find_program_in_path(aKeyValue);
   }
 
   if (!commandPath)
     return PR_FALSE;
 
+#ifdef SYSTEM_PATH_BUILD
+  PRBool matches = NS_LITERAL_CSTRING("/usr/bin/" MOZ_APP_NAME).Equals(commandPath);
+  g_free(commandPath);
+  return matches;
+#else
   PRBool matches = mAppPath.Equals(commandPath);
   g_free(commandPath);
   return matches;
+#endif
 }
 
 NS_IMETHODIMP
 nsGNOMEShellService::IsDefaultBrowser(PRBool aStartupCheck,
                                       PRBool* aIsDefaultBrowser)
 {
   *aIsDefaultBrowser = PR_FALSE;
   if (aStartupCheck)
@@ -211,17 +218,22 @@
 #ifdef DEBUG
   if (aForAllUsers)
     NS_WARNING("Setting the default browser for all users is not yet supported");
 #endif
 
   nsCOMPtr<nsIGConfService> gconf = do_GetService(NS_GCONFSERVICE_CONTRACTID);
 
   nsCAutoString schemeList;
+
+#ifdef SYSTEM_PATH_BUILD
+  nsCAutoString appKeyValue(NS_LITERAL_CSTRING("/usr/bin/" MOZ_APP_NAME));
+#else 
   nsCAutoString appKeyValue(mAppPath);
+#endif
   appKeyValue.Append(" \"%s\"");
   unsigned int i;
 
   for (i = 0; i < NS_ARRAY_LENGTH(appProtocols); ++i) {
     schemeList.Append(nsDependentCString(appProtocols[i].name));
     schemeList.Append(',');
 
     if (appProtocols[i].essential || aClaimAllTypes) {
