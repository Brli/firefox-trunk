#!/usr/bin/python

import sys
import os
import os.path
from optparse import OptionParser

if __name__ == '__main__':

  PASSTHROUGH_ARGS = [
    '--appname',
    '--timeout',
    '--log-file',
    '--debugger',
    '--debugger-args',
    '--debugger-interactive',
  ]

  DEFAULTS = {
    '--appname': lambda: os.path.join(root, 'bin', '@MOZ_APP_NAME@')
  }

  root = '/@MOZ_TESTDIR@'

  args = iter(sys.argv[1:])
  while True:
    try:
      arg = args.next()
    except StopIteration:
      break

    if arg == '--harness-root-dir':
      try:
        root = args.next()
        break
      except StopIteration:
        sys.exit(1)

  parser = OptionParser()
  parser.add_option('--harness-root-dir',
                    dest='root', default='/@MOZ_TESTDIR@',
                    help='Override the path to the test harness installation')
  parser.add_option('--own-display',
                    action='store_true', dest='wantOwnDisplay', default=False,
                    help='Run the test inside its own X session')
  parser.add_option('--own-session-bus',
                    action='store_true', dest='wantOwnSessionBus', default=False,
                    help='Run the test with its own dbus session')

  sys.path.insert(0, os.path.join(root, 'reftest'))

  runner = os.path.join(root, 'reftest', 'runreftest.py')
  g = {}
  g['__file__'] = runner
  execfile(runner, g)

  runner_parser = g['ReftestOptions'](g['Automation']())
  for arg in PASSTHROUGH_ARGS:
    assert runner_parser.has_option(arg)
    parser.add_option(runner_parser.get_option(arg))

  (options, args) = parser.parse_args()

  respawn_args = []
  strip_args = []

  if options.wantOwnDisplay or os.getenv('DISPLAY') == None:
    respawn_args.extend(['xvfb-run', '-a', '-s', '-screen 0 1024x768x24'])
    strip_args.append('--own-display')
  if options.wantOwnSessionBus or os.getenv('DBUS_SESSION_BUS_ADDRESS') == None:
    respawn_args.extend(['dbus-launch', '--exit-with-session'])
    strip_args.append('--own-session-bus')

  if len(respawn_args) > 0:
    import subprocess

    i = 0
    while len(sys.argv) > 0 and i < len(sys.argv):
      arg = sys.argv[i]
      if arg in strip_args:
        del sys.argv[i]
        if parser.has_option(arg) and parser.get_option(arg).action == 'store':
          del sys.argv[i]
      else:
        i+=1

    respawn_args.extend(sys.argv)
    sys.exit(subprocess.call(respawn_args, stdin=sys.stdin, stdout=sys.stdout, stderr=sys.stderr))

  g['sys'].argv = []
  argv = g['sys'].argv
  argv.append(runner)

  for arg in PASSTHROUGH_ARGS:
    opt = parser.get_option(arg)
    action = opt.action
    val = getattr(options, opt.dest)
    if val == opt.default:
      continue
    if action == 'store':
      if val != None:
        argv.extend([arg, str(val)])
    elif action == 'store_true':
      if val == True:
        argv.append(arg)
    elif action == 'store_false':
      if val == False:
        argv.append(arg)
    else:
      raise RuntimeError('Unexpected argument type with action "%s"' % action)

  for arg in DEFAULTS:
    if arg not in argv:
      argv.extend([arg, DEFAULTS[arg]()])

  argv.extend(args)
  print argv
  g['main']()
