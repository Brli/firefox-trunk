#!/usr/bin/python

import sys
import os
import os.path
from optparse import OptionParser

if __name__ == '__main__':

  PASSTHROUGH_ARGS = [
    '--interactive',
    '--verbose',
    '--manifest',
    '--debugger',
    '--debugger-args',
    '--debugger-interactive',
    '--tests-root-dir',
    '--testing-modules-dir',
    '--build-info-json'
  ]

  DEFAULTS = {
    '--tests-root-dir': lambda: os.path.join(root, 'xpcshell', 'tests'),
    '--testing-modules-dir': lambda: os.path.join(root, 'modules')
  }

  root = '/@MOZ_TESTDIR@'

  args = iter(sys.argv[1:])
  while True:
    try:
      arg = args.next()
    except StopIteration:
      break

    if arg == '--harness-root-dir':
      try:
        root = args.next()
        break
      except StopIteration:
        sys.exit(1)

  parser = OptionParser()
  parser.add_option('--harness-root-dir',
                    dest='root', default='/@MOZ_TESTDIR@',
                    help='Override the path to the test harness installation')
  parser.add_option('--xpcshell',
                    dest='xpcshell', default=None,
                    help='Override the path to the xpcshell binary')
  parser.add_option('--own-display',
                    action='store_true', dest='wantOwnDisplay', default=False,
                    help='Run the test inside its own X session')
  parser.add_option('--own-session-bus',
                    action='store_true', dest='wantOwnSessionBus', default=False,
                    help='Run the test with its own dbus session')
  parser.add_option('--logfiles',
                    action='store_true', dest='logfiles', default=False,
                    help='Create log files')

  sys.path.insert(0, os.path.join(root, 'mozbase', 'mozinfo'))
  sys.path.insert(0, os.path.join(root, 'xpcshell'))

  runner = os.path.join(root, 'xpcshell', 'runxpcshelltests.py')
  g = {}
  g['__file__'] = runner
  execfile(runner, g)

  runner_parser = g['XPCShellOptions']()
  for arg in PASSTHROUGH_ARGS:
    assert runner_parser.has_option(arg)
    parser.add_option(runner_parser.get_option(arg))

  (options, args) = parser.parse_args()

  respawn_args = []
  strip_args = []

  if options.wantOwnDisplay or os.getenv('DISPLAY') == None:
    respawn_args.extend(['xvfb-run', '-a', '-s', '-screen 0 1024x768x24'])
    strip_args.append('--own-display')
  if options.wantOwnSessionBus or os.getenv('DBUS_SESSION_BUS_ADDRESS') == None:
    respawn_args.extend(['dbus-launch', '--exit-with-session'])
    strip_args.append('--own-session-bus')

  if len(respawn_args) > 0:
    import subprocess

    i = 0
    while len(sys.argv) > 0 and i < len(sys.argv):
      arg = sys.argv[i]
      if arg in strip_args:
        del sys.argv[i]
        if parser.has_option(arg) and parser.get_option(arg).action == 'store':
          del sys.argv[i]
      else:
        i+=1

    respawn_args.extend(sys.argv)
    sys.exit(subprocess.call(respawn_args, stdin=sys.stdin, stdout=sys.stdout, stderr=sys.stderr))

  g['sys'].argv = []
  argv = g['sys'].argv
  argv.append(runner)

  for arg in PASSTHROUGH_ARGS:
    action = parser.get_option(arg).action
    val = getattr(options, parser.get_option(arg).dest)
    if action == 'store':
      if val != None:
        argv.extend([arg, val])
    elif action == 'store_true':
      if val == True:
        argv.append(arg)
    elif action == 'store_false':
      if val == False:
        argv.append(arg)
    else:
      raise RuntimeError('Unexpected argument type with action "%s"' % action)

  for arg in DEFAULTS:
    if arg not in argv:
      argv.extend([arg, DEFAULTS[arg]()])

  if not options.logfiles:
    argv.append('--no-logfiles')

  for arg in args:
    if arg.endswith('.js'):
      if len(args) > 1:
        print >>sys.stderr, 'Can only specify one file at a time'
        sys.exit(1)
      argv.extend(['--test-path', os.path.basename(arg)])
      args[0] = os.path.dirname(arg)

  argv.append(os.path.join(root, 'bin', 'xpcshell') if options.xpcshell == None else options.xpcshell)
  argv.extend(args)

  print g['sys'].argv
  g['main']()
