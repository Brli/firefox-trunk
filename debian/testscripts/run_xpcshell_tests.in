#!/usr/bin/python

import sys
import os
import os.path
from optparse import OptionParser

if __name__ == '__main__':

  parser = OptionParser()
  parser.add_option('--harness-root-dir',
                    dest='root', default='/@MOZ_TESTDIR@',
                    help='Override the path to the test harness installation')
  parser.add_option('--xpcshell',
                    dest='xpcshell', default=None,
                    help='Override the path to the xpcshell binary')
  parser.add_option('--own-display',
                    action='store_true', dest='wantOwnDisplay', default=False,
                    help='Run the test inside its own X session')
  parser.add_option('--own-session-bus',
                    action='store_true', dest='wantOwnSessionBus', default=False,
                    help='Run the test with its own dbus session')
  parser.add_option('--interactive',
                    action='store_true', dest='interactive', default=False,
                    help="Don't automatically run tests, drop to an xpcshell prompt")
  parser.add_option('--verbose',
                    action='store_true', dest='verbose', default=False,
                    help='Always print stdout and stderr from tests')
  parser.add_option('--logfiles',
                    action='store_true', dest='logfiles', default=False,
                    help='Create log files')
  parser.add_option('--manifest',
                    type='string', dest='manifest', default=None,
                    help='Manifest of test directories to use')
  parser.add_option('--tests-root-dir',
                    type='string', dest='testsRootDir', default=None,
                    help='Absolute path to directory where all tests are located')
  parser.add_option('--testing-modules-dir',
                    dest='testingModulesDir', default=None,
                    help='Directory where testing modules are located')
  parser.add_option('--build-info-json',
                    type = 'string', dest='mozInfo', default=None,
                    help='path to a mozinfo.json including information about the build configuration')

  (options, args) = parser.parse_args()

  respawn_args = []
  strip_args = []

  if options.wantOwnDisplay or os.getenv('DISPLAY') == None:
    respawn_args.extend(['xvfb-run', '-a', '-s', '-screen 0 1024x768x24'])
    strip_args.append('--own-display')
  if options.wantOwnSessionBus or os.getenv('DBUS_SESSION_BUS_ADDRESS') == None:
    respawn_args.extend(['dbus-launch', '--exit-with-session'])
    strip_args.append('--own-session-bus')

  if len(respawn_args) > 0:
    import subprocess

    i = 0
    while len(sys.argv) > 0 and i < len(sys.argv):
      arg = sys.argv[i]
      if arg in strip_args:
        del sys.argv[i]
        if parser.has_option(arg) and parser.get_option(arg).action == 'store':
          del sys.argv[i]
      else:
        i+=1

    respawn_args.extend(sys.argv)
    sys.exit(subprocess.call(respawn_args, stdin=sys.stdin, stdout=sys.stdout, stderr=sys.stderr))

  sys.argv = []
  sys.argv.append(os.path.join(options.root, 'xpcshell', 'runxpcshelltests.py'))

  if options.interactive:
    sys.argv.append('--interactive')
  if options.verbose:
    sys.argv.append('--verbose')
  if not options.logfiles:
    sys.argv.append('--no-logfiles')
  if options.manifest:
    sys.argv.extend(['--manifest', options.manifest])
  sys.argv.append('--tests-root-dir')
  if options.testsRootDir:
    sys.argv.append(options.testsRootDir)
  else:
    sys.argv.append(os.path.join(options.root, 'xpcshell', 'tests'))
  sys.argv.append('--testing-modules-dir')
  if options.testingModulesDir:
    sys.argv.append(options.testingModulesDir)
  else:
    sys.argv.append(os.path.join(options.root, 'modules'))
  if options.mozInfo:
    sys.argv.extend(['--build-info-json', options.mozInfo])

  for arg in args:
    if arg.endswith('.js'):
      if len(args) > 1:
        print >>sys.stderr, 'Can only specify one file at a time'
        sys.exit(1)
      sys.argv.extend(['--test-path', os.path.basename(arg)])
      args[0] = os.path.dirname(arg)

  sys.argv.append(os.path.join(options.root, 'bin', 'xpcshell') if options.xpcshell == None else options.xpcshell)
  sys.argv.extend(args)

  sys.path.insert(0, os.path.join(options.root, 'mozbase', 'mozinfo'))
  sys.path.insert(0, os.path.join(options.root, 'xpcshell'))

  g = globals()
  g['__name__'] = '__main__'
  g['__file__'] = sys.argv[0]

  execfile(sys.argv[0], g)
