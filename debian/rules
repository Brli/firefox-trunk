#!/usr/bin/make -f

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE		?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE		?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
DEB_BUILD_ARCH			?= $(shell dpkg-architecture -qDEB_BUILD_ARCH)
DEB_HOST_GNU_CPU		?= $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)
# Other things which should be defined before including the CDBS rules
DEB_TAR_SRCDIR			:= mozilla
DEB_AUTO_UPDATE_AUTOCONF	:= 2.13
DEB_DH_STRIP_ARGS		= --dbg-package=$(DEBIAN_NAME)-dbg
# We don't want build-tree/mozilla/README to be shipped as a doc
DEB_INSTALL_DOCS_ALL 		:= $(NULL)
# Needed for mozclient
DEBIAN_NAME			:= $(shell dpkg-parsechangelog | sed -n 's/^Source: *\(.*\)$$/\1/ p')
MOZCLIENT_PROJECTNAME		:= $(DEBIAN_NAME)
MOZCLIENT_PROJECTDIR		:= $(CURDIR)/debian/mozclient

# We need to do this before including patchsys-quilt.mk
# because we don't want the pre-build target to depend on this, but
# we want to ensure that appropriate patches are disabled before the
# apply-patches target is called
post-patches:: debian/disable-patches-for-release

include /usr/share/cdbs/1/rules/tarball.mk
include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/cdbs/1/rules/patchsys-quilt.mk
include /usr/share/cdbs/1/class/autotools.mk
include $(CURDIR)/debian/mozclient/$(DEBIAN_NAME).mk
# FIXME: We need to do this another way in the new world
#include /usr/share/mozilla-devscripts/lp-locale-export.mk

# Various build options
DEB_WANT_UNIT_TESTS	?= 1
DEB_MIN_SYSDEPS		?= 1
DEB_ENABLE_IPC		?= 1
DEB_ENABLE_BREAKPAD	?= 1
DEB_BUILD_UNOFFICIAL	?= 0
DEB_MOZ_VALGRIND	?= 0

# Define other variables used throughout the build
DEBIAN_APP_NAME		:= $(shell echo $(DEBIAN_NAME) | sed -e 's/-.*//')
DEBIAN_APP_NAME_VER	:= $(shell echo $(DEBIAN_NAME) | sed -e 's/.*-//g')

DEBIAN_APP_NAME_OTHER	:= abrowser
DEBIAN_NAME_OTHER	:= $(shell echo $(DEBIAN_NAME) | sed -e 's/$(DEBIAN_APP_NAME)/$(DEBIAN_APP_NAME_OTHER)/')
BRANDING_NAME_OTHER	:= awesome-browser

DEBIAN_VERSION		:= $(shell dpkg-parsechangelog | sed -n 's/^Version: *\(.*\)$$/\1/ p')
FF_VERSION		= $(shell cat build-tree/mozilla/browser/config/version.txt)
FF_DIR			= usr/lib/$(DEBIAN_APP_NAME)-$(FF_VERSION)
FF_VERSION_DEVMILESTONE	= $(shell echo $(FF_VERSION) | grep [ab] | sed -e 's/pre//; s/.*[ab]//')
FF_VERSION_SERIES	= $(shell echo $(FF_VERSION) | sed -e 's/pre//; s/[ab].*//' | cut -d '.' -f 1,2)

PYTHON			:= $(shell which python)
DISTRIB 		:= $(shell lsb_release -i -s)
ifneq (,$(filter $(DISTRIB),Ubuntu))
	DISTRIB_VERSION_MAJOR := $(shell lsb_release -s -r | cut -d '.' -f 1)
	DISTRIB_VERSION_MINOR := $(shell lsb_release -s -r | cut -d '.' -f 2)
endif

ifeq (1,$(DEB_MOZ_VALGRIND))
	DEB_BUILD_UNOFFICIAL = 1
endif

EXTRA_SYSTEM_CONFIGURE_FLAGS	= $(NULL)

DESKTOP				:= $(DEBIAN_NAME_OTHER).desktop

# minVersion and maxVersion used in install.rdf
EM_TRANSLATION_VERSION		= $(FF_VERSION)
EM_TRANSLATION_MIN_VERSION	= 3.0
EM_TRANSLATION_MAX_VERSION	= $(FF_VERSION)

# translation flags
MOZ_TRANSLATION_AUTO_XPI_OUTDIR		:= debian/lp-export-xpis/
MOZ_TRANSLATION_AUTO_XPI_SEARCHDIRS	:= debian/$(DEBIAN_NAME)
MOZ_TRANSLATION_AUTO_XPI_LOCALE		:= en-US

ifneq (1, $(DEB_MIN_SYSDEPS))
	DEBIAN_XUL_VER	:= $(shell MALLOC_OPTIONS=O xulrunner-2.0 --gre-version)
	DEBIAN_XUL_DEV	:= /usr/lib/xulrunner-devel-$(DEBIAN_XUL_VER)
	DEBIAN_XUL_DIR	:= usr/lib/xulrunner-$(DEBIAN_XUL_VER)
endif

# enable IPC and the crash reporter only on i386, amd64 and armel
ifeq (,$(findstring i386,$(DEB_BUILD_ARCH)))
ifeq (,$(findstring amd64,$(DEB_BUILD_ARCH)))
ifeq (,$(findstring armel,$(DEB_BUILD_ARCH)))
	DEB_ENABLE_IPC		= 0
	DEB_ENABLE_BREAKPAD	= 0
endif
endif
endif

# Change branding based on Version
ifneq (,$(findstring ~hg,$(DEBIAN_VERSION)))
	# minefield branding for snapshots
	BRANDING 		= $(NULL)
	DESKTOP_BRANDED  	= $(DEBIAN_NAME)-nightly.desktop
	STARTUP_WM_CLASS	= $(shell cat build-tree/mozilla/browser/branding/nightly/locales/en-US/brand.properties \
				    | grep brandShortName | sed -e 's/brandShortName\=//')
	BRAND_NAME		= $(strip $(STARTUP_WM_CLASS) $(FF_VERSION_SERIES))
else
ifneq (0, $(DEB_BUILD_UNOFFICIAL))
	# build with unofficial branding
	BRANDING		= --with-branding=browser/branding/unofficial
	DESKTOP_BRANDED		= $(DEBIAN_NAME)-unofficial.desktop
	BRAND_NAME		= $(shell cat build-tree/mozilla/browser/branding/unofficial/locales/en-US/brand.properties \
				    | grep brandShortName | sed -e 's/brandShortName\=//')
	STARTUP_WM_CLASS	= $(BRAND_NAME)
else
ifneq (,$(findstring ~a,$(DEBIAN_VERSION)))
	# codename branding for alpha
	BRANDING		= --with-branding=browser/branding/unofficial
	DESKTOP_BRANDED 	= $(DEBIAN_NAME)-unofficial.desktop
	BRAND_NAME		= $(shell cat build-tree/mozilla/browser/branding/unofficial/locales/en-US/brand.properties \
				    | grep brandShortName | sed -e 's/brandShortName\=//')
	STARTUP_WM_CLASS	= $(BRAND_NAME)
else
ifneq (,$(findstring ~b,$(DEBIAN_VERSION)))
	BRANDING		= --enable-official-branding
	DESKTOP_BRANDED 	= $(DEBIAN_NAME)-beta.desktop
	STARTUP_WM_CLASS	= $(shell cat build-tree/mozilla/other-licenses/branding/firefox/locales/en-US/brand.properties \
				    | grep brandShortName | sed -e 's/brandShortName\=//')
	BRAND_NAME		= $(strip $(STARTUP_WM_CLASS) $(FF_VERSION_SERIES))
else
	# automatically build with official branding for final and final RCs builds
	BRANDING		= --enable-official-branding
	DESKTOP_BRANDED		= $(DEBIAN_NAME)-final.desktop
	BRAND_NAME		= $(shell cat build-tree/mozilla/other-licenses/branding/firefox/locales/en-US/brand.properties \
				    | grep brandShortName | sed -e 's/brandShortName\=//')
	STARTUP_WM_CLASS	= $(BRAND_NAME)
endif
endif
endif
endif

# This defines the name of the real executable binary (not the wrapper shell script)
# This is necessary so we can blacklist it in Apport
ifneq (1, $(DEB_MIN_SYSDEPS))
	BINREAL := $(DEBIAN_NAME)
else
	BINREAL := $(DEBIAN_NAME)-bin
endif

# Defines used for the Mozilla text preprocessor
DEB_DEFINES = 	-DLIBDIR="$(FF_DIR)" -DAPPNAME="$(DEBIAN_NAME)" -DAPPNAME_OTHER="$(DEBIAN_NAME_OTHER)" -DBINREAL="$(BINREAL)" \
		-DSTARTUP_WM_CLASS="$(STARTUP_WM_CLASS)" -DBRAND_NAME="$(BRAND_NAME)" -DFF_VERSION_DEVMILESTONE="$(FF_VERSION_DEVMILESTONE)" \
		-DDEB_MIN_SYSDEPS=$(DEB_MIN_SYSDEPS) -DDEB_ENABLE_IPC=$(DEB_ENABLE_IPC) -DDEB_ENABLE_BREAKPAD=$(DEB_ENABLE_BREAKPAD)

CFLAGS		= -g
CXXFLAGS	= -g

LDFLAGS = $(shell echo $$LDFLAGS | sed -e 's/-Wl,-Bsymbolic-functions//')
export LDFLAGS

export DEB_BUILD_HARDENING=1

# Define the configure flags
ifneq (1,$(DEB_MOZ_VALGRIND))
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --disable-optimize
endif
else
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --enable-optimize="-g -O -freorder-blocks"
endif

ifeq (1,$(DEB_ENABLE_IPC))
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --enable-ipc
else
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --disable-ipc
endif

$(info DEB_WANT_UNIT_TESTS=$(DEB_WANT_UNIT_TESTS))
ifeq (1,$(DEB_WANT_UNIT_TESTS))
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --enable-tests --enable-mochitest
	DEB_MAKE_CHECK_TARGET = -f ../../debian/testsuite.mk test
# Uncomment when the IPC test-suite works
#ifeq (1,$(DEB_ENABLE_IPC))
#  EXTRA_SYSTEM_CONFIGURE_FLAGS += --enable-ipdl-tests
#else
#  EXTRA_SYSTEM_CONFIGURE_FLAGS += --disable-ipdl-tests
#endif
else
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --disable-tests --disable-mochitest --disable-ipdl-tests
endif

ifneq (1, $(DEB_MIN_SYSDEPS))
	USE_SYSTEM_NSPR := $(shell pkg-config --exists 'nspr >= 4.8.4.99'; a=$$?; if test $$a != 1; then echo 1; fi)
endif
ifeq (1,$(USE_SYSTEM_NSPR))
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --with-system-nspr
else
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --without-system-nspr
endif

ifneq (1, $(DEB_MIN_SYSDEPS))
	USE_SYSTEM_CAIRO := $(shell pkg-config --exists 'cairo >= 1.8.8'; a=$$?; if test $$a != 1; then echo 1; fi)
endif
# for old cairo versions we cannot use system cairo
ifeq (1,$(USE_SYSTEM_CAIRO))
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --enable-system-cairo
else
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --disable-system-cairo
endif

ifneq (1, $(DEB_MIN_SYSDEPS))
	USE_SYSTEM_SQLITE :=  $(shell pkg-config --exists 'sqlite3 >= 3.7.1'; a=$$?; if test $$a != 1; then echo 1; fi)
endif
ifeq (1,$(USE_SYSTEM_SQLITE))
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --enable-system-sqlite
else
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --disable-system-sqlite
endif

ifneq (1, $(DEB_MIN_SYSDEPS))
	USE_SYSTEM_NSS := $(shell pkg-config --exists 'nss >= 3.12.7'; a=$$?; if test $$a != 1; then echo 1; fi)
endif
ifeq (1,$(USE_SYSTEM_NSS))
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --with-system-nss
else
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --without-system-nss
endif

ifneq (1, $(DEB_MIN_SYSDEPS))
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --enable-extensions=default,-reporter
else
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --enable-extensions=default
endif

ifneq (1, $(DEB_MIN_SYSDEPS))
	system_jpeg_configure_flags     := --with-system-jpeg=/usr
	system_zlib_configure_flags     := --with-system-zlib=/usr
	system_myspell_configure_flags  := --disable-system-myspell
	system_xul_configure_flags      := --with-libxul-sdk=$(DEBIAN_XUL_DEV) --with-system-libxul
	system_chrome_configure_flags	:= --enable-chrome-format=jar
else
	system_jpeg_configure_flags     := --without-system-jpeg
	system_zlib_configure_flags     := --without-system-zlib
	system_myspell_configure_flags  := --enable-system-myspell
	system_chrome_configure_flags	:= --enable-chrome-format=omni
endif

ifeq (1, $(DEB_ENABLE_BREAKPAD))
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --enable-crashreporter
else
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --disable-crashreporter
endif

ifeq (1, $(DEB_MOZ_VALGRIND))
	EXTRA_SYSTEM_CONFIGURE_FLAGS += --disable-jemalloc --enable-valgrind
	export MOZ_MAKE_FLAGS = "-j4"
endif

ifeq (0, $(DEB_BUILD_UNOFFICIAL))
	export MOZILLA_OFFICIAL = 1
	export BUILD_OFFICIAL = 1
endif

DEB_CONFIGURE_USER_FLAGS= \
	$(EXTRA_SYSTEM_CONFIGURE_FLAGS) \
	--disable-debug \
	--with-user-appdir=.mozilla \
	$(system_jpeg_configure_flags) \
	$(system_zlib_configure_flags) \
	$(system_xul_configure_flags) \
	$(system_myspell_configure_flags) \
	$(system_chrome_configure_flags) \
	--disable-composer \
	--disable-elf-dynstr-gc \
	--disable-gtktest \
	--disable-install-strip \
	--disable-installer \
	--disable-ldap \
	--disable-mailnews \
	--disable-profilesharing \
	--disable-strip \
	--disable-strip-libs \
	--disable-updater \
	--disable-xprint \
	--enable-application=browser \
	--enable-canvas \
	--enable-default-toolkit=cairo-gtk2 \
	--enable-gnomevfs \
	--enable-optimize \
	--enable-pango \
	--enable-postscript \
	--enable-svg \
	--enable-mathml \
	--enable-xft \
	--enable-xinerama \
	--enable-safe-browsing \
	--enable-single-profile \
	--with-distribution-id=com.ubuntu \
	$(BRANDING)

UUDECODE = \
	debsearch.gif \
	$(NULL)

DEBIAN_EXECUTABLES = \
	firefox.sh \
	$(NULL)

subst_files = \
	debian/usr.bin.firefox.apparmor \
	debian/README.Debian \
	debian/firefox.sh \
	debian/ubuntu-firefox.js \
	debian/ubuntu-abrowser.js \
	$(NULL)

pkg_files = \
	debian/apport/$(DEBIAN_NAME) \
	debian/$(DESKTOP) \
	debian/apport/$(DEBIAN_NAME).py \
	debian/$(DESKTOP_BRANDED) \
	debian/$(DEBIAN_NAME)-restart-required.update-notifier \
	debian/$(DEBIAN_NAME).xml \
	debian/$(DEBIAN_NAME)-gnome-support.install \
	debian/$(DEBIAN_NAME)-gnome-support.postinst \
	debian/$(DEBIAN_NAME)-gnome-support.prerm \
	debian/$(DEBIAN_NAME)-gnome-support.preinst \
	debian/$(DEBIAN_NAME_OTHER).xml \
	debian/$(DEBIAN_NAME_OTHER)-gnome-support.install \
	debian/$(DEBIAN_NAME_OTHER)-gnome-support.postinst \
	debian/$(DEBIAN_NAME_OTHER)-gnome-support.prerm \
	debian/$(DEBIAN_NAME)-core.dirs \
	debian/$(DEBIAN_NAME)-core.docs \
	debian/$(DEBIAN_NAME)-core.install \
	debian/$(DEBIAN_NAME)-core.links \
	debian/$(DEBIAN_NAME).menu \
	debian/$(DEBIAN_NAME)-core.postinst \
	debian/$(DEBIAN_NAME)-core.postrm \
	debian/$(DEBIAN_NAME)-core.preinst \
	debian/$(DEBIAN_NAME)-core.prerm \
	debian/$(DEBIAN_NAME_OTHER).install \
	debian/$(DEBIAN_NAME_OTHER).links \
	debian/$(DEBIAN_NAME_OTHER).dirs \
	debian/$(DEBIAN_NAME).install \
	debian/$(DEBIAN_NAME).links \
	debian/$(DEBIAN_NAME).dirs \
	debian/$(DEBIAN_NAME).preinst \
	debian/$(DEBIAN_NAME)-mozsymbols.install \
	$(NULL)

%:: %.in
	sed -e 's,@LIBDIR@,/$(FF_DIR),g' \
	    -e 's,@APPNAME@,$(DEBIAN_NAME),g' \
	    -e 's/@VENDOR@/'`lsb_release -i -s`'/g' \
	    -e 's/@VENDOR_SUB@/'`lsb_release -r -s`'/g' \
	    -e 's/@VENDOR_COMMENT@/'`lsb_release -c -s`'/g' \
	    -e 's/@APP_VERSION@/$(FF_VERSION)/' < $< > $@

%.in:: %.pp
	$(PYTHON) $(DEB_BUILDDIR)/config/Preprocessor.py -Fsubstitution $(DEB_DEFINES) $(CURDIR)/$< > $(CURDIR)/$@

$(pkg_files):: $(foreach file, $(pkg_files), $(subst -$(DEBIAN_APP_NAME_VER),,$(file).in))
	sed -e 's,@LIBDIR@,$(FF_DIR),g' \
	    -e 's,@APPNAME@,$(DEBIAN_NAME),g' \
	    -e 's,@APPNAME_OTHER@,$(DEBIAN_NAME_OTHER),g' \
	    -e 's,@BINREAL@,$(BINREAL),g' \
	    -e 's,@STARTUP_WM_CLASS@,$(STARTUP_WM_CLASS),g' \
	    -e 's,@BRAND_NAME@,$(BRAND_NAME),g' \
	    -e 's,@FF_VERSION_DEVMILESTONE@,$(FF_VERSION_DEVMILESTONE),g' < $(subst -$(DEBIAN_APP_NAME_VER),,$@.in) > $@

debian/disable-patches-for-release:
	if [ -f "$(CURDIR)/debian/patches/series-disable-patches.$(DISTRIB_VERSION_MAJOR).$(DISTRIB_VERSION_MINOR)" ] ; then \
	        /bin/sh $(CURDIR)/debian/disable-patches.sh $(CURDIR)/debian/patches/series-disable-patches.$(DISTRIB_VERSION_MAJOR).$(DISTRIB_VERSION_MINOR) $(CURDIR) ; \
	fi
	touch $@

debian/usr.bin.firefox.apparmor.in:
	if [ '$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)' -ge '1010' ]; then \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.10.10 $(CURDIR)/debian/usr.bin.firefox.apparmor.in ; \
	elif [ "$(DISTRIB_VERSION_MAJOR)" -ge "10" ]; then \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.10.04 $(CURDIR)/debian/usr.bin.firefox.apparmor.in ; \
	else \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.9.10 $(CURDIR)/debian/usr.bin.firefox.apparmor.in ; \
	fi

debian/migrator/ffox-32-beta-profile-migration-dialog: debian/migrator/main.c
	$(CC) $(CFLAGS) -o $@ $< $(shell pkg-config --cflags --libs gtk+-2.0)

BRANDING_MAKEFILES = ../../browser/branding/$(BRANDING_NAME_OTHER)/Makefile \
	../../browser/branding/$(BRANDING_NAME_OTHER)/locales/Makefile \
	../../browser/branding/$(BRANDING_NAME_OTHER)/content/Makefile \
	$(NULL)

ifeq (1, $(DEB_MIN_SYSDEPS))
post-patches:: debian/stamp-autotools-files-moz
debian/stamp-autotools-files-moz:
	# Number of processors: $(PROCESSORS) [$(shell grep 'model name' /proc/cpuinfo | head -1)]
	if [ "Z$(DEB_AUTO_UPDATE_AUTOCONF)" != Z ] || [ ! -e $(DEB_SRCDIR)/js/src/configure ]; \
	then cd $(DEB_SRCDIR)/js/src && `which autoconf$(DEB_AUTO_UPDATE_AUTOCONF) || which autoconf`; fi
	touch $@
endif

post-patches:: debian/migrator/ffox-32-beta-profile-migration-dialog

common-build-arch::
	cd build-tree/mozilla/browser/locales/; \
		$(MAKE) SUBMAKEFILES="$(BRANDING_MAKEFILES)" $(BRANDING_MAKEFILES)
ifeq (1,$(DEB_MIN_SYSDEPS))
	cp debian/ubuntu-firefox.js build-tree/mozilla/dist/bin/defaults/pref/vendor.js
else
	cp debian/ubuntu-firefox.js build-tree/mozilla/dist/bin/defaults/preferences/vendor.js
endif

common-install-arch:: $(pkg_files)
ifeq (1, $(DEB_ENABLE_BREAKPAD))
	# create build symbols
	cd build-tree/mozilla/; \
	        $(MAKE) buildsymbols MOZ_SYMBOLS_EXTRA_BUILDID=$(shell date -d "`dpkg-parsechangelog | grep Date: | sed -e 's/^Date: //'`" +%y%m%d%H%M%S)-$(DEB_HOST_GNU_CPU)
endif
	rm -rf build-tree/mozilla/dist/bin/chrome/browser-branding*
ifeq (1,$(DEB_MIN_SYSDEPS))
	cp debian/ubuntu-abrowser.js build-tree/mozilla/dist/bin/defaults/pref/vendor.js
else
	cp debian/ubuntu-abrowser.js build-tree/mozilla/dist/bin/defaults/preferences/vendor.js
endif
	cd build-tree/mozilla/browser/locales/; \
		$(MAKE) -C ../../browser/branding/$(BRANDING_NAME_OTHER)/content/; \
		$(MAKE) -C ../../browser/branding/$(BRANDING_NAME_OTHER)/locales/; \
		$(MAKE) -C ../../browser/branding/$(BRANDING_NAME_OTHER)/; \
		$(MAKE) -C ../../browser/app/
	cd build-tree/mozilla/; \
		mkdir -p $(CURDIR)/debian/tmp-$(DEBIAN_NAME_OTHER)-branding/; \
		$(MAKE) install DESTDIR=$(CURDIR)/debian/tmp-$(DEBIAN_NAME_OTHER)-branding/

binary-install/$(DEBIAN_NAME)-core::
	cp debian/usr.bin.firefox.apparmor debian/$(DEBIAN_NAME)-core/etc/apparmor.d/usr.bin.$(DEBIAN_NAME)

binary-install/$(DEBIAN_NAME_OTHER)::
	cp -f debian/$(DESKTOP) \
	        debian/$(DEBIAN_NAME_OTHER)/usr/share/applications/$(DEBIAN_NAME_OTHER).desktop

binary-install/$(DEBIAN_NAME)::
	cp -f debian/$(DESKTOP_BRANDED) \
	        debian/$(DEBIAN_NAME)/usr/share/applications/$(DEBIAN_NAME).desktop

LOCALE_VERSION = $(shell echo $(DEBIAN_VERSION) | sed -e 's/~hg.*/pre/' | tr -d '~')

ifeq (1, $(DEB_MIN_SYSDEPS))
	GNOME_SUPPORT_FILES = libmozgnome.so libnkgnomevfs.so
endif

#binary-post-install/$(DEBIAN_NAME)-core:: auto-locale-xpi.mk/translate compare
binary-post-install/$(DEBIAN_NAME)-core:: compare
#	sed \
#	        -e 's/@EM_VERSION@/$(EM_TRANSLATION_VERSION)/' \
#	        -e 's/@EM_FIREFOX_MIN_VERSION@/$(EM_TRANSLATION_MIN_VERSION)/' \
#	        -e 's/@EM_FIREFOX_MAX_VERSION@/$(EM_TRANSLATION_MAX_VERSION)/' \
#	        < debian/translation-support/install.rdf.in > debian/install.rdf
#	cd debian && zip lp-export-xpis/en-US.xpi install.rdf
#ifeq (,$(findstring $(EM_TRANSLATION_VERSION), $(LOCALE_VERSION)))
#	$(warning EM_TRANSLATION_VERSION=$(EM_TRANSLATION_VERSION) LOCALE_VERSION=$(LOCALE_VERSION). You need to explicitly adjust the translation version and min/max bounds.)
#endif
	$(foreach file,$(GNOME_SUPPORT_FILES),rm -fv debian/$(DEBIAN_NAME)-core/usr/lib/firefox-*/components/$(file);) true

ifeq (1, $(DEB_MIN_SYSDEPS))
# we want the gnome dependencies not to be in the main package at shlibdeps runtime, hence we dont
# install them at binary-install/* stage, but copy them over _after_ the shlibdeps had been generated
binary-predeb/$(DEBIAN_NAME)-core::
	$(foreach file,$(GNOME_SUPPORT_FILES),cp -vf debian/tmp/usr/lib/firefox-*/components/$(file) debian/$(DEBIAN_NAME)-core/usr/lib/firefox-*/components/;) true

	$(foreach lib,libsoftokn3.so libfreebl3.so libnssdbm3.so, \
	        LD_LIBRARY_PATH=debian/$(DEBIAN_NAME)-core/$(FF_DIR):$$LD_LIBRARY_PATH \
	        build-tree/mozilla/dist/bin/shlibsign -v -i debian/$(DEBIAN_NAME)-core/$(FF_DIR)/$(lib);)

# ... and remove them from the -gnome-support package accordingly
binary-predeb/$(DEBIAN_NAME)-gnome-support::
	$(foreach file,$(GNOME_SUPPORT_FILES),rm -vf debian/$(DEBIAN_NAME)-gnome-support/usr/lib/firefox-*/components/$(file);) true

binary-predeb/$(DEBIAN_NAME_OTHER)-gnome-support::
	$(foreach file,$(GNOME_SUPPORT_FILES),rm -vf debian/$(DEBIAN_NAME_OTHER)-gnome-support/usr/lib/firefox-*/components/$(file);) true
endif

pre-build:: debian/usr.bin.firefox.apparmor.in $(subst_files)
	set -e; for i in $(UUDECODE); do \
	        uudecode -o debian/$$i debian/$$i.uu; \
	        done ; \
	        for i in $(DEBIAN_EXECUTABLES); do \
	                chmod a+x debian/$$i; \
	        done

clean::
	set -e; for i in $(UUDECODE); do \
	        rm -f debian/$$i; \
	        done ; 
	rm -f debian/$(DEBIAN_NAME).desktop
	rm -f $(subst_files) $(pkg_files) debian/install.rdf debian/apport/$(DEBIAN_NAME).in
	find debian/ -name *.pp | sed -e 's/\.pp$/\.in/g' | xargs rm -f
	rm -f debian/migrator/ffox-32-beta-profile-migration-dialog
	rm -f debian/migrator/*~
	rm -rf debian/tmp-*
	rm -f debian/stamp-autotools-files-moz
	rm -f debian/usr.bin.firefox.apparmor.in
	if [ -f "$(CURDIR)/debian/patches/series.orig" ] ; then \
	        mv -f $(CURDIR)/debian/patches/series.orig $(CURDIR)/debian/patches/series ; \
	fi
	rm -f debian/disable-patches-for-release
