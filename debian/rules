#!/usr/bin/make -f

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE		?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE		?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
DEB_BUILD_ARCH			?= $(shell dpkg-architecture -qDEB_BUILD_ARCH)
DEB_HOST_GNU_CPU		?= $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)
# Other things which should be defined before including the CDBS rules
DEB_TAR_SRCDIR			:= mozilla
DEB_DH_STRIP_ARGS		= --dbg-package=$(DEBIAN_NAME)-dbg
# We don't want build-tree/mozilla/README to be shipped as a doc
DEB_INSTALL_DOCS_ALL 		:= $(NULL)
# Needed for mozclient
DEBIAN_NAME			:= $(shell dpkg-parsechangelog | sed -n 's/^Source: *\(.*\)$$/\1/ p')
MOZCLIENT_PROJECTNAME		:= $(DEBIAN_NAME)
MOZCLIENT_PROJECTDIR		:= $(CURDIR)/debian/mozclient

DEB_WANT_UNIT_TESTS	:= 0
ifeq (,$(findstring nocheck,$(DEB_BUILD_OPTIONS)))
	DEB_WANT_UNIT_TESTS=1
endif

include /usr/share/cdbs/1/rules/tarball.mk
include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/cdbs/1/rules/patchsys-quilt.mk
include /usr/share/cdbs/1/class/makefile.mk
include $(CURDIR)/debian/mozclient/$(DEBIAN_NAME).mk
# FIXME: We need to do this another way in the new world
#include /usr/share/mozilla-devscripts/lp-locale-export.mk

MOZ_OBJDIR		:= $(DEB_BUILDDIR)/objdir-$(DEB_BUILD_GNU_TYPE)

# Various build options
DEB_MIN_SYSDEPS		?= 1
DEB_ENABLE_IPC		?= 1
DEB_ENABLE_BREAKPAD	?= 1
DEB_BUILD_UNOFFICIAL	?= 0
DEB_MOZ_VALGRIND	?= 0
DEB_BUILD_PGO		?= 0

ifeq (1,$(DEB_MOZ_VALGRIND))
	DEB_BUILD_UNOFFICIAL = 1
endif

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	DEB_BUILD_PGO = 0
endif

ifeq (1, $(DEB_BUILD_PGO))
	# See https://bugzilla.mozilla.org/show_bug.cgi?id=602245
	DEB_WANT_UNIT_TESTS = 0
	# We don't really want the crash reporter on for PGO builds yet
	DEB_BUILD_UNOFFICIAL = 1
endif

include $(CURDIR)/debian/testsuite.mk

# Define other variables used throughout the build
DEBIAN_APP_NAME		:= $(shell echo $(DEBIAN_NAME) | sed -e 's/-.*//')
DEBIAN_APP_NAME_VER	:= $(shell echo $(DEBIAN_NAME) | sed -e 's/.*-//g')

DEBIAN_APP_NAME_OTHER	:= abrowser
DEBIAN_NAME_OTHER	:= $(shell echo $(DEBIAN_NAME) | sed -e 's/$(DEBIAN_APP_NAME)/$(DEBIAN_APP_NAME_OTHER)/')
BRANDING_NAME_OTHER	:= awesome-browser

DEB_MAKE_MAKEFILE		:= client.mk

# Without this, CDBS passes CFLAGS and CXXFLAGS options to client.mk, which breaks the build
DEB_MAKE_EXTRA_ARGS		:=

# These normally come from autotools.mk, which we no longer include (because we
# don't want to run configure)
ifeq (1, $(DEB_BUILD_PGO))
	DEB_MAKE_BUILD_TARGET	:= profiledbuild
endif
DEB_MAKE_INSTALL_TARGET		:= install DESTDIR=$(CURDIR)/debian/tmp
DEB_MAKE_CLEAN_TARGET		:= distclean
DEB_CONFIGURE_LOCALSTATEDIR	:= /var
DEB_CONFIGURE_LIBEXECDIR	= /$(FF_DIR)
DEB_CONFIGURE_PREFIX		= /$(FF_PREFIX)

DEBIAN_VERSION			:= $(shell dpkg-parsechangelog | sed -n 's/^Version: *\(.*\)$$/\1/ p')
FF_VERSION			= $(shell cat $(DEB_BUILDDIR)/browser/config/version.txt)
FF_PREFIX			:= usr
FF_DIR				= $(FF_PREFIX)/lib/$(DEBIAN_APP_NAME)-$(FF_VERSION)
FF_VERSION_DEVMILESTONE		= $(shell echo $(FF_VERSION) | grep [ab] | sed -e 's/pre//; s/.*[ab]//')
FF_VERSION_SERIES		= $(shell echo $(FF_VERSION) | sed -e 's/pre//; s/[ab].*//' | cut -d '.' -f 1,2)

PYTHON			:= $(shell which python)
DISTRIB 		:= $(shell lsb_release -i -s)

ifneq (,$(filter $(DISTRIB),Ubuntu))
	DISTRIB_VERSION_MAJOR := $(shell lsb_release -s -r | cut -d '.' -f 1)
	DISTRIB_VERSION_MINOR := $(shell lsb_release -s -r | cut -d '.' -f 2)
endif

DESKTOP				:= $(DEBIAN_NAME_OTHER).desktop

# minVersion and maxVersion used in install.rdf
EM_TRANSLATION_VERSION		= $(FF_VERSION)
EM_TRANSLATION_MIN_VERSION	= 3.0
EM_TRANSLATION_MAX_VERSION	= $(FF_VERSION)

# translation flags
MOZ_TRANSLATION_AUTO_XPI_OUTDIR		:= debian/lp-export-xpis/
MOZ_TRANSLATION_AUTO_XPI_SEARCHDIRS	:= debian/$(DEBIAN_NAME)
MOZ_TRANSLATION_AUTO_XPI_LOCALE		:= en-US

ifneq (1, $(DEB_MIN_SYSDEPS))
	DEBIAN_XUL_VER	:= $(shell MALLOC_OPTIONS=O xulrunner-2.0 --gre-version)
	DEBIAN_XUL_DEV	:= /usr/lib/xulrunner-devel-$(DEBIAN_XUL_VER)
	DEBIAN_XUL_DIR	:= usr/lib/xulrunner-$(DEBIAN_XUL_VER)
endif

# enable IPC and the crash reporter only on i386, amd64 and armel
ifeq (,$(findstring i386,$(DEB_BUILD_ARCH)))
ifeq (,$(findstring amd64,$(DEB_BUILD_ARCH)))
ifeq (,$(findstring armel,$(DEB_BUILD_ARCH)))
	DEB_ENABLE_IPC		= 0
	DEB_ENABLE_BREAKPAD	= 0
endif
endif
endif

# Change branding based on Version
ifneq (,$(findstring ~hg,$(DEBIAN_VERSION)))
	# minefield branding for snapshots
	BRANDING 		= --with-branding=browser/branding/nightly
	DESKTOP_BRANDED  	= $(DEBIAN_NAME)-nightly.desktop
	STARTUP_WM_CLASS	= $(shell cat $(DEB_BUILDDIR)/browser/branding/nightly/locales/en-US/brand.properties \
				    | grep brandShortName | sed -e 's/brandShortName\=//')
	BRAND_NAME		= $(strip $(STARTUP_WM_CLASS) $(FF_VERSION_SERIES))
else
ifneq (0, $(DEB_BUILD_UNOFFICIAL))
	# build with unofficial branding
	BRANDING		= --with-branding=browser/branding/unofficial
	DESKTOP_BRANDED		= $(DEBIAN_NAME)-unofficial.desktop
	BRAND_NAME		= $(shell cat $(DEB_BUILDDIR)/browser/branding/unofficial/locales/en-US/brand.properties \
				    | grep brandShortName | sed -e 's/brandShortName\=//')
	STARTUP_WM_CLASS	= $(BRAND_NAME)
else
ifneq (,$(findstring ~a,$(DEBIAN_VERSION)))
	# codename branding for alpha
	BRANDING		= --with-branding=browser/branding/unofficial
	DESKTOP_BRANDED 	= $(DEBIAN_NAME)-unofficial.desktop
	BRAND_NAME		= $(shell cat $(DEB_BUILDDIR)/browser/branding/unofficial/locales/en-US/brand.properties \
				    | grep brandShortName | sed -e 's/brandShortName\=//')
	STARTUP_WM_CLASS	= $(BRAND_NAME)
else
ifneq (,$(findstring ~b,$(DEBIAN_VERSION)))
	BRANDING		= --enable-official-branding
	DESKTOP_BRANDED 	= $(DEBIAN_NAME)-beta.desktop
	STARTUP_WM_CLASS	= $(shell cat $(DEB_BUILDDIR)/other-licenses/branding/firefox/locales/en-US/brand.properties \
				    | grep brandShortName | sed -e 's/brandShortName\=//')
	BRAND_NAME		= $(strip $(STARTUP_WM_CLASS) $(FF_VERSION_SERIES))
else
	# automatically build with official branding for final and final RCs builds
	BRANDING		= --enable-official-branding
	DESKTOP_BRANDED		= $(DEBIAN_NAME)-final.desktop
	BRAND_NAME		= $(shell cat $(DEB_BUILDDIR)/other-licenses/branding/firefox/locales/en-US/brand.properties \
				    | grep brandShortName | sed -e 's/brandShortName\=//')
	STARTUP_WM_CLASS	= $(BRAND_NAME)
endif
endif
endif
endif

CFLAGS		= -g
CXXFLAGS	= -g

LDFLAGS = $(shell echo $$LDFLAGS | sed -e 's/-Wl,-Bsymbolic-functions//')
export LDFLAGS
export DEB_BUILD_HARDENING=1
# See https://launchpad.net/bugs/663294
ifeq (1,$(shell test "$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)" -ge "1104" && echo "1"))
    export DEB_BUILD_HARDENING_PIE=0
endif
export MOZCONFIG=$(CURDIR)/debian/mozconfig
ifneq (1,$(DEB_BUILD_UNOFFICIAL))
	export MOZILLA_OFFICIAL=1
	export BUILD_OFFICIAL=1
endif
ifeq (1,$(DEB_BUILD_PGO))
	CC	= $(shell which gcc-4.5)
	CXX	= $(shell which g++-4.5)
	export CC
	export CXX
endif

ifneq (1, $(DEB_MIN_SYSDEPS))
	USE_SYSTEM_NSPR := $(shell pkg-config --exists 'nspr >= 4.8.4.99'; a=$$?; if test $$a != 1; then echo 1; fi)
	USE_SYSTEM_CAIRO := $(shell pkg-config --exists 'cairo >= 1.8.8'; a=$$?; if test $$a != 1; then echo 1; fi)
	USE_SYSTEM_SQLITE :=  $(shell pkg-config --exists 'sqlite3 >= 3.7.1'; a=$$?; if test $$a != 1; then echo 1; fi)
	USE_SYSTEM_NSS := $(shell pkg-config --exists 'nss >= 3.12.7'; a=$$?; if test $$a != 1; then echo 1; fi)
endif

# Defines used for the Mozilla text preprocessor
DEB_DEFINES = 	-DLIBDIR="$(FF_DIR)" -DAPPNAME="$(DEBIAN_NAME)" -DSERIES="$(FF_VERSION_SERIES)" -DVENDOR="`lsb_release -i -s`" \
		-DVENDOR_SUB="`lsb_release -r -s`" -DVENDOR_COMMENT="`lsb_release -c -s`" -DAPPNAME_OTHER="$(DEBIAN_NAME_OTHER)" \
		-DSTARTUP_WM_CLASS="$(STARTUP_WM_CLASS)" -DBRAND_NAME="$(BRAND_NAME)" -DFF_VERSION_DEVMILESTONE="$(FF_VERSION_DEVMILESTONE)" \
		-DDEBIAN_XUL_DEV="$(DEBIAN_XUL_DEV)" -DBRANDING="$(BRANDING)" -DTOPSRCDIR="$(CURDIR)" -DDEB_BUILD_GNU_TYPE="$(DEB_BUILD_GNU_TYPE)" \
		-DDEB_CONFIGURE_PREFIX="$(DEB_CONFIGURE_PREFIX)" -DDEB_CONFIGURE_LOCALSTATEDIR="$(DEB_CONFIGURE_LOCALSTATEDIR)" \
		-DDEB_CONFIGURE_LIBEXECDIR="$(DEB_CONFIGURE_LIBEXECDIR)" -DMOZ_OBJDIR="$(MOZ_OBJDIR)" -DDEB_BUILDDIR="$(DEB_BUILDDIR)" -DPYTHON="$(PYTHON)"
ifeq (1, $(DEB_MIN_SYSDEPS))
	DEB_DEFINES += -DDEB_MIN_SYSDEPS=$(DEB_MIN_SYSDEPS)
endif
ifeq (1, $(DEB_ENABLE_IPC))
	DEB_DEFINES += -DDEB_ENABLE_IPC=$(DEB_ENABLE_IPC)
endif
ifeq (1, $(DEB_ENABLE_BREAKPAD))
	DEB_DEFINES += -DDEB_ENABLE_BREAKPAD=$(DEB_ENABLE_BREAKPAD)
endif
ifeq (1, $(DEB_MOZ_VALGRIND))
	DEB_DEFINES += -DDEB_MOZ_VALGRIND=$(DEB_MOZ_VALGRIND)
endif
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	DEB_DEFINES += -DDEB_NO_OPTIMIZE=1
endif
ifeq (1, $(USE_SYSTEM_NSPR))
	DEB_DEFINES += -DUSE_SYSTEM_NSPR=$(USE_SYSTEM_NSPR)
endif
ifeq (1, $(USE_SYSTEM_CAIRO))
	DEB_DEFINES += -DUSE_SYSTEM_CAIRO=$(USE_SYSTEM_CAIRO)
endif
ifeq (1, $(USE_SYSTEM_SQLITE))
	DEB_DEFINES += -DUSE_SYSTEM_SQLITE=$(USE_SYSTEM_SQLITE)
endif
ifeq (1, $(USE_SYSTEM_NSS))
	DEB_DEFINES += -DUSE_SYSTEM_NSS=$(USE_SYSTEM_NSS)
endif
ifeq (1,$(DEB_WANT_UNIT_TESTS))
	DEB_DEFINES += -DDEB_WANT_UNIT_TESTS=$(DEB_WANT_UNIT_TESTS)
endif
ifneq ($(DEB_BUILD_GNU_TYPE),$(DEB_HOST_GNU_TYPE))
	DEB_DEFINES += -DDEB_HOST_GNU_TYPE="$(DEB_HOST_GNU_TYPE)"
endif
ifeq (1,$(DEB_BUILD_PGO))
	DEB_DEFINES += -DDEB_BUILD_PGO=$(DEB_BUILD_PGO)
endif
ifeq (1,$(shell test "$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)" -ge "1104" && echo "1"))
	DEB_DEFINES += -DDISABLE_GNOMEVFS=1
endif

UUDECODE = \
	debsearch.gif \
	$(NULL)

DEBIAN_EXECUTABLES = \
	firefox.sh \
	migrator/xulapp-profilemigrator \
	$(NULL)

subst_files = \
	debian/usr.bin.$(DEBIAN_NAME) \
	debian/README.Debian \
	debian/firefox.sh \
	debian/vendor-firefox.js \
	debian/vendor-abrowser.js \
	debian/apport/$(DEBIAN_NAME) \
	debian/$(DESKTOP) \
	debian/apport/$(DEBIAN_NAME).py \
	debian/$(DESKTOP_BRANDED) \
	debian/$(DEBIAN_NAME).xml \
	debian/$(DEBIAN_NAME)-gnome-support.install \
	debian/$(DEBIAN_NAME)-gnome-support.postinst \
	debian/$(DEBIAN_NAME)-gnome-support.prerm \
	debian/$(DEBIAN_NAME_OTHER).xml \
	debian/$(DEBIAN_NAME_OTHER)-gnome-support.install \
	debian/$(DEBIAN_NAME_OTHER)-gnome-support.postinst \
	debian/$(DEBIAN_NAME_OTHER)-gnome-support.prerm \
	debian/$(DEBIAN_NAME)-core.dirs \
	debian/$(DEBIAN_NAME)-core.docs \
	debian/$(DEBIAN_NAME)-core.install \
	debian/$(DEBIAN_NAME)-core.links \
	debian/$(DEBIAN_NAME).menu \
	debian/$(DEBIAN_NAME)-core.postinst \
	debian/$(DEBIAN_NAME)-core.postrm \
	debian/$(DEBIAN_NAME)-core.preinst \
	debian/$(DEBIAN_NAME)-core.prerm \
	debian/$(DEBIAN_NAME_OTHER).install \
	debian/$(DEBIAN_NAME_OTHER).links \
	debian/$(DEBIAN_NAME).install \
	debian/$(DEBIAN_NAME).links \
	debian/$(DEBIAN_NAME)-mozsymbols.install \
	debian/mozconfig \
	$(NULL)

ifneq (1, $(DEB_MIN_SYSDEPS))
EXTRA_BD = \n\tlibnspr4-dev,\n\tlibnss3-dev,\n\tlibcairo2-dev,\n\tlibsqlite3-dev,\n\tlibpixman-1-dev,\n\tlibjpeg62-dev,\n\tlibpng12-dev,\n\tzlib1g-dev,\n\tlibhunspell-dev,\n\txulrunner-2.0,
else
EXTRA_BD = $(NULL)
endif

regen-debian-control::
	sed -e 's/@EXTRA_BD@/$(EXTRA_BD)/g' \
	    -e 's/@APPNAME@/$(DEBIAN_NAME)/g' < debian/control.pp > debian/control

$(subst_files): $(foreach file, $(subst_files), $(subst -$(DEBIAN_APP_NAME_VER),,$(file).in))
	$(PYTHON) $(DEB_BUILDDIR)/config/Preprocessor.py -Fsubstitution --marker="%%" $(DEB_DEFINES) $(CURDIR)/$(subst -$(DEBIAN_APP_NAME_VER),,$@.in) > $(CURDIR)/$@

debian/usr.bin.firefox.in:
	if [ '$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)' -ge '1010' ]; then \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.10.10 $(CURDIR)/debian/usr.bin.firefox.in ; \
	elif [ "$(DISTRIB_VERSION_MAJOR)" -ge "10" ]; then \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.10.04 $(CURDIR)/debian/usr.bin.firefox.in ; \
	else \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.9.10 $(CURDIR)/debian/usr.bin.firefox.in ; \
	fi

debian/$(DEBIAN_NAME).desktop: debian/$(DESKTOP_BRANDED)
	cp $< $@

BRANDING_MAKEFILES = ../../browser/branding/$(BRANDING_NAME_OTHER)/Makefile \
	../../browser/branding/$(BRANDING_NAME_OTHER)/locales/Makefile \
	../../browser/branding/$(BRANDING_NAME_OTHER)/content/Makefile \
	$(NULL)

debian/stamp-buildsymbols: debian/stamp-makefile-build
ifeq (1, $(DEB_ENABLE_BREAKPAD))
	# create build symbols
	cd $(MOZ_OBJDIR); \
	        $(MAKE) buildsymbols MOZ_SYMBOLS_EXTRA_BUILDID=$(shell date -d "`dpkg-parsechangelog | grep Date: | sed -e 's/^Date: //'`" +%y%m%d%H%M%S)-$(DEB_HOST_GNU_CPU)
endif
	touch $@

common-build-arch:: debian/stamp-testsuite
	cd $(MOZ_OBJDIR)/browser/locales/; \
		$(MAKE) SUBMAKEFILES="$(BRANDING_MAKEFILES)" $(BRANDING_MAKEFILES)
ifeq (1,$(DEB_MIN_SYSDEPS))
	cp debian/vendor-firefox.js $(MOZ_OBJDIR)/dist/bin/defaults/pref/vendor.js
else
	cp debian/vendor-firefox.js $(MOZ_OBJDIR)/dist/bin/defaults/preferences/vendor.js
endif

common-install-arch::
	rm -rf $(MOZ_OBJDIR)/dist/bin/chrome/browser-branding*
ifeq (1,$(DEB_MIN_SYSDEPS))
	cp debian/vendor-abrowser.js $(MOZ_OBJDIR)/dist/bin/defaults/pref/vendor.js
else
	cp debian/vendor-abrowser.js $(MOZ_OBJDIR)/dist/bin/defaults/preferences/vendor.js
endif
	cd $(MOZ_OBJDIR)/browser/locales/; \
		$(MAKE) -C ../../browser/branding/$(BRANDING_NAME_OTHER)/content/; \
		$(MAKE) -C ../../browser/branding/$(BRANDING_NAME_OTHER)/locales/; \
		$(MAKE) -C ../../browser/branding/$(BRANDING_NAME_OTHER)/; \
		$(MAKE) -C ../../browser/app/
	cd $(MOZ_OBJDIR)/; \
		mkdir -p $(CURDIR)/debian/tmp-$(DEBIAN_NAME_OTHER)-branding/; \
		$(MAKE) install DESTDIR=$(CURDIR)/debian/tmp-$(DEBIAN_NAME_OTHER)-branding/

common-binary-arch:: debian/stamp-buildsymbols

LOCALE_VERSION = $(shell echo $(DEBIAN_VERSION) | sed -e 's/~hg.*/pre/' | tr -d '~')

ifeq (1, $(DEB_MIN_SYSDEPS))
	GNOME_SUPPORT_FILES = libmozgnome.so libnkgnomevfs.so
endif

#binary-post-install/$(DEBIAN_NAME)-core:: auto-locale-xpi.mk/translate compare
binary-post-install/$(DEBIAN_NAME)-core:: compare
#	sed \
#	        -e 's/@EM_VERSION@/$(EM_TRANSLATION_VERSION)/' \
#	        -e 's/@EM_FIREFOX_MIN_VERSION@/$(EM_TRANSLATION_MIN_VERSION)/' \
#	        -e 's/@EM_FIREFOX_MAX_VERSION@/$(EM_TRANSLATION_MAX_VERSION)/' \
#	        < debian/translation-support/install.rdf.in > debian/install.rdf
#	cd debian && zip lp-export-xpis/en-US.xpi install.rdf
#ifeq (,$(findstring $(EM_TRANSLATION_VERSION), $(LOCALE_VERSION)))
#	$(warning EM_TRANSLATION_VERSION=$(EM_TRANSLATION_VERSION) LOCALE_VERSION=$(LOCALE_VERSION). You need to explicitly adjust the translation version and min/max bounds.)
#endif
	$(foreach file,$(GNOME_SUPPORT_FILES),rm -fv debian/$(DEBIAN_NAME)/usr/lib/firefox-*/components/$(file);) true

ifeq (1, $(DEB_MIN_SYSDEPS))
# we want the gnome dependencies not to be in the main package at shlibdeps runtime, hence we dont
# install them at binary-install/* stage, but copy them over _after_ the shlibdeps had been generated
binary-predeb/$(DEBIAN_NAME)-core::
	$(foreach file,$(GNOME_SUPPORT_FILES),cp -vf debian/tmp/usr/lib/firefox-*/components/$(file) debian/$(DEBIAN_NAME)/usr/lib/firefox-*/components/;) true

	$(foreach lib,libsoftokn3.so libfreebl3.so libnssdbm3.so, \
	        LD_LIBRARY_PATH=debian/$(DEBIAN_NAME)/$(FF_DIR):$$LD_LIBRARY_PATH \
	        $(MOZ_OBJDIR)/dist/bin/shlibsign -v -i debian/$(DEBIAN_NAME)/$(FF_DIR)/$(lib);)

# ... and remove them from the -gnome-support package accordingly
binary-predeb/$(DEBIAN_NAME)-gnome-support::
	$(foreach file,$(GNOME_SUPPORT_FILES),rm -vf debian/$(DEBIAN_NAME)-gnome-support/usr/lib/firefox-*/components/$(file);) true

binary-predeb/$(DEBIAN_NAME_OTHER)-gnome-support::
	$(foreach file,$(GNOME_SUPPORT_FILES),rm -vf debian/$(DEBIAN_NAME_OTHER)-gnome-support/usr/lib/firefox-*/components/$(file);) true
endif

pre-build:: $(subst_files) debian/$(DEBIAN_NAME).desktop
	set -e; for i in $(UUDECODE); do \
	        uudecode -o debian/$$i debian/$$i.uu; \
	        done ; \
	        for i in $(DEBIAN_EXECUTABLES); do \
	                chmod a+x debian/$$i; \
	        done

clean:: regen-debian-control
	set -e; for i in $(UUDECODE); do \
	        rm -f debian/$$i; \
	        done ; 
	rm -f debian/$(DEBIAN_NAME).desktop
	rm -f $(subst_files) debian/install.rdf debian/apport/$(DEBIAN_NAME).in
	rm -rf debian/tmp-*
	rm -f debian/usr.bin.firefox.in
	rm -f debian/stamp-*
	rm -f debian/$(DEBIAN_NAME).desktop
