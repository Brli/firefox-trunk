#!/usr/bin/make -f

# These are used for cross-compiling and for saving the configure script
# from having to guess our platform (since we know it already)
DEB_HOST_GNU_TYPE		?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE		?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
DEB_BUILD_ARCH			?= $(shell dpkg-architecture -qDEB_BUILD_ARCH)
DEB_HOST_GNU_CPU		?= $(shell dpkg-architecture -qDEB_HOST_GNU_CPU)
# Other things which should be defined before including the CDBS rules
DEB_TAR_SRCDIR			:= mozilla
DEB_DH_STRIP_ARGS		= --dbg-package=$(DEBIAN_NAME)-dbg
# We don't want build-tree/mozilla/README to be shipped as a doc
DEB_INSTALL_DOCS_ALL 		:= $(NULL)
# Needed for mozclient
DEBIAN_APP_NAME			:= firefox
CHANNEL				:= nightly
MOZCLIENT_PROJECTNAME		:= $(DEBIAN_APP_NAME)
MOZCLIENT_PROJECTDIR		:= $(CURDIR)/debian/mozclient

# Various build options
# 1 = Use bundled libs
DEB_MIN_SYSDEPS		?= 1
# 1 - Use system libxul
DEB_SYS_LIBXUL		?= 0
# 1 = Enable crashreporter (if supported)
DEB_ENABLE_BREAKPAD	?= 1
# 1 = Disable official branding and crash reporter (the crash reporter builds but is not enabled in application.ini)
DEB_BUILD_UNOFFICIAL	?= 0
# 1 = Build without jemalloc suitable for valgrind debugging
DEB_MOZ_VALGRIND	?= 0
# 1 = Profile guided build
DEB_BUILD_PGO		?= 0
# 1 = Build and run the testsuite
DEB_WANT_UNIT_TESTS	?= 1
# 1 = Turn on debugging bits and disable optimizations
DEB_DEBUG		?= 0
# 1 = Disable optimizations
DEB_NO_OPTIMIZE		?= 0

ifneq (,$(findstring nocheck,$(DEB_BUILD_OPTIONS)))
	DEB_WANT_UNIT_TESTS=0
endif

include /usr/share/cdbs/1/rules/tarball.mk
include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/cdbs/1/rules/patchsys-quilt.mk
include /usr/share/cdbs/1/class/makefile.mk
include $(CURDIR)/debian/mozclient/$(DEBIAN_APP_NAME).mk

MOZ_MOZDIR		:=
MOZ_OBJDIR		:= $(DEB_BUILDDIR)$(MOZ_MOZDIR)/objdir-$(DEB_BUILD_GNU_TYPE)
MOZ_DISTDIR		:= $(MOZ_OBJDIR)$(MOZ_MOZDIR)/dist

ifeq (1,$(DEB_SYS_LIBXUL))
	DEB_MIN_SYSDEPS = 0
endif

ifeq (1,$(DEB_MOZ_VALGRIND))
	DEB_BUILD_UNOFFICIAL = 1
endif

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	DEB_BUILD_PGO = 0
	DEB_NO_OPTIMIZE = 1
endif

ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
	DEB_NO_OPTIMIZE = 1
	DEB_DEBUG = 1
	DEB_BUILD_UNOFFICIAL = 1
endif

ifeq (1, $(DEB_BUILD_PGO))
	# See https://bugzilla.mozilla.org/show_bug.cgi?id=602245
	DEB_WANT_UNIT_TESTS = 0
	# We don't really want the crash reporter on for PGO builds yet
	DEB_ENABLE_BREAKPAD = 0
	DEB_BUILD_UNOFFICIAL = 1
endif

include $(CURDIR)/debian/testsuite.mk

# Define other variables used throughout the build
DEBIAN_NAME		:= $(shell dpkg-parsechangelog | sed -n 's/^Source: *\(.*\)$$/\1/ p')
DEBIAN_APP_NAME_VER	:= $(shell echo $(DEBIAN_NAME) | sed -e 's/$(DEBIAN_APP_NAME)-*//g' )
ifeq ($(DEBIAN_NAME),$(DEBIAN_APP_NAME_VER))
	DEBIAN_APP_NAME_VER	:=
endif

DEB_MAKE_MAKEFILE		:= client.mk

# Without this, CDBS passes CFLAGS and CXXFLAGS options to client.mk, which breaks the build
DEB_MAKE_EXTRA_ARGS		:=

# These normally come from autotools.mk, which we no longer include (because we
# don't want to run configure)
ifeq (1, $(DEB_BUILD_PGO))
	DEB_MAKE_BUILD_TARGET	:= profiledbuild
endif
DEB_MAKE_INSTALL_TARGET		:= install DESTDIR=$(CURDIR)/debian/tmp
DEB_MAKE_CLEAN_TARGET		:= distclean
DEB_CONFIGURE_LOCALSTATEDIR	:= /var

DEBIAN_VERSION			:= $(shell dpkg-parsechangelog | sed -n 's/^Version: *\(.*\)$$/\1/ p')
FF_VERSION			= $(shell cat $(DEB_BUILDDIR)/browser/config/version.txt)
FF_PREFIX			:= /usr
FF_LIBDIR			= $(FF_PREFIX)/lib/$(DEBIAN_NAME)-$(FF_VERSION)
FF_INCDIR			= $(FF_PREFIX)/include/$(DEBIAN_NAME)-$(FF_VERSION)
FF_IDLDIR			= $(FF_PREFIX)/share/idl/$(DEBIAN_NAME)-$(FF_VERSION)
FF_SDKDIR			= $(FF_PREFIX)/lib/$(DEBIAN_NAME)-devel-$(FF_VERSION)
FF_VERSION_DEVMILESTONE		= $(shell echo $(FF_VERSION) | grep [ab] | sed -e 's/pre//; s/.*[ab]//')
FF_VERSION_SERIES		= $(shell echo $(FF_VERSION) | sed -e 's/pre//; s/[ab].*//' | cut -d '.' -f 1,2)

NSPR_DEPENDS	:= $(NULL)
NSS_DEPENDS	:= $(NULL)
CAIRO_DEPENDS	:= $(NULL)
DEB_DH_GENCONTROL_ARGS	= -- -Vnspr:Depends=$(NSPR_DEPENDS) -Vnss:Depends=$(NSS_DEPENDS) -Vcairo:Depends=$(CAIRO_DEPENDS)

PYTHON			:= $(shell which python)
DISTRIB 		:= $(shell lsb_release -i -s)

ifneq (,$(filter $(DISTRIB),Ubuntu))
	DISTRIB_VERSION_MAJOR := $(shell lsb_release -s -r | cut -d '.' -f 1)
	DISTRIB_VERSION_MINOR := $(shell lsb_release -s -r | cut -d '.' -f 2)
endif

ifneq ($(DEBIAN_NAME),$(DEBIAN_APP_NAME))
	# We don't want to make builds which change MOZ_APP_NAME official
	DEB_BUILD_UNOFFICIAL = 1
endif

ifeq (1, $(DEB_SYS_LIBXUL))
	DEBIAN_XUL_VER	:= $(shell MALLOC_OPTIONS=O xulrunner-2.0 --gre-version)
	DEBIAN_XUL_DEV	:= /usr/lib/xulrunner-devel-$(DEBIAN_XUL_VER)
	DEBIAN_XUL_DIR	:= usr/lib/xulrunner-$(DEBIAN_XUL_VER)
else
	DEBIAN_XUL_VER	= $(shell tail -1 $(DEB_BUILDDIR)/config/milestone.txt)
endif

# enable the crash reporter only on i386, amd64 and armel
ifeq (,$(findstring i386,$(DEB_BUILD_ARCH)))
ifeq (,$(findstring amd64,$(DEB_BUILD_ARCH)))
ifeq (,$(findstring armel,$(DEB_BUILD_ARCH)))
	DEB_ENABLE_BREAKPAD	= 0
endif
endif
endif

BRANDING	= $(CHANNEL)
ifeq (1,$(DEB_BUILD_UNOFFICIAL))
ifneq (,$(filter official beta aurora, $(BRANDING)))
	BRANDING = unofficial
endif
endif
BRANDING_DIR	= browser/branding/$(BRANDING)
BRANDING_OPTION = --with-branding=$(BRANDING_DIR)
ifneq (,$(filter official beta, $(BRANDING)))
	BRANDING_OPTION	= --enable-official-branding
endif
DISPLAY_NAME	= $(shell cat $(DEB_BUILDDIR)/$(BRANDING_DIR)/locales/en-US/brand.properties \
		    | grep brandShortName | sed -e 's/brandShortName\=//')

ifneq (,$(findstring ~hg,$(DEBIAN_VERSION)))
ifeq (1,$(shell test "$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)" -lt "1010" && echo "1"))
	# Disable crashreporter on nightly builds older than Maverick
	DEB_ENABLE_BREAKPAD = 0
endif
endif

ifneq (,$(findstring ~mfn,$(DEBIAN_VERSION)))
	# For now, disable crashreporter for the firefox-next PPA
	DEB_ENABLE_BREAKPAD = 0
endif

CFLAGS		= -g
CXXFLAGS	= -g

LDFLAGS = $(shell echo $$LDFLAGS | sed -e 's/-Wl,-Bsymbolic-functions//')
export LDFLAGS
export DEB_BUILD_HARDENING=1
# See https://launchpad.net/bugs/663294
ifeq (1,$(shell test "$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)" -ge "1104" && echo "1"))
    export DEB_BUILD_HARDENING_PIE=0
endif
ifeq (1,$(shell test "$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)" -ge "1104" && echo "1"))
	ENABLE_GLOBALMENU := 1
endif
ifeq (1,$(shell test "$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)" -ge "1010" && echo "1"))
	SYSTEM_DICTDIR = /usr/share/hunspell
else
	SYSTEM_DICTDIR = /usr/share/myspell/dicts
endif
export MOZCONFIG=$(CURDIR)/debian/mozconfig
ifneq (1,$(DEB_BUILD_UNOFFICIAL))
	export BUILD_OFFICIAL=1
endif
ifeq (1,$(DEB_ENABLE_BREAKPAD))
	# Needed to enable crashreported in application.ini
	export MOZILLA_OFFICIAL=1
endif
ifeq (1,$(DEB_BUILD_PGO))
	CC	= $(shell which gcc-4.5)
	CXX	= $(shell which g++-4.5)
	export CC
	export CXX
endif

ifneq (1, $(DEB_MIN_SYSDEPS))
ifneq (1, $(DEB_DEBUG))
	USE_SYSTEM_NSPR := $(shell pkg-config --exists 'nspr >= 4.8.7'; a=$$?; if test $$a != 1; then echo 1; fi)
	USE_SYSTEM_CAIRO := $(shell pkg-config --exists 'cairo >= 1.8.8'; a=$$?; if test $$a != 1; then echo 1; fi)
	USE_SYSTEM_SQLITE :=  $(shell pkg-config --exists 'sqlite3 >= 3.7.1'; a=$$?; if test $$a != 1; then echo 1; fi)
	USE_SYSTEM_NSS := $(shell pkg-config --exists 'nss >= 3.12.9'; a=$$?; if test $$a != 1; then echo 1; fi)
	USE_SYSTEM_HUNSPELL := $(shell pkg-config --exists 'hunspell >= 1.2' && echo 1)
ifeq (1, $(USE_SYSTEM_CAIRO))
	USE_SYSTEM_CAIRO := $(shell printf "\#include <cairo-tee.h>\nint main(int argc, char *argv[]) { return 0; }" > test.c && \
			      gcc `pkg-config --cflags --libs cairo` -lc -o test test.c > /dev/null 2>&1 && echo "1"; rm -f test test.c)
endif
endif
endif

# Defines used for the Mozilla text preprocessor
DEB_DEFINES = 	-DLIBDIR="$(FF_LIBDIR)" -DAPPNAME="$(DEBIAN_NAME)" -DSERIES="$(FF_VERSION_SERIES)" -DAPPBASENAME="$(DEBIAN_APP_NAME)"\
		-DINCDIR="$(FF_INCDIR)" -DIDLDIR="$(FF_IDLDIR)" -DFF_VERSION="$(FF_VERSION)" -DXUL_VERSION="$(DEBIAN_XUL_VER)" -DDEB_BUILD_ARCH="$(DEB_BUILD_ARCH)" \
		-DDISPLAY_NAME="$(DISPLAY_NAME)" -DFF_VERSION_DEVMILESTONE="$(FF_VERSION_DEVMILESTONE)" \
		-DDEBIAN_XUL_DEV="$(DEBIAN_XUL_DEV)" -DBRANDING_OPTION="$(BRANDING_OPTION)" -DTOPSRCDIR="$(CURDIR)" -DDEB_BUILD_GNU_TYPE="$(DEB_BUILD_GNU_TYPE)" \
		-DFF_PREFIX="$(FF_PREFIX)" -DDEB_CONFIGURE_LOCALSTATEDIR="$(DEB_CONFIGURE_LOCALSTATEDIR)" -DSDKDIR="$(FF_SDKDIR)" -DMOZ_DISTDIR="$(MOZ_DISTDIR)" \
		-DMOZ_OBJDIR="$(MOZ_OBJDIR)" -DDEB_BUILDDIR="$(DEB_BUILDDIR)" -DPYTHON="$(PYTHON)" -DMOZ_PROFILE_FOLDER=".mozilla/$(DEBIAN_NAME)" -DSYSTEM_DICTDIR="$(SYSTEM_DICTDIR)"
ifeq (1, $(DEB_MIN_SYSDEPS))
	DEB_DEFINES += -DDEB_MIN_SYSDEPS
endif
ifeq (1, $(DEB_SYS_LIBXUL))
	DEB_DEFINES += -DDEB_SYS_LIBXUL
endif
ifeq (1, $(DEB_ENABLE_BREAKPAD))
	DEB_DEFINES += -DDEB_ENABLE_BREAKPAD
endif
ifeq (1, $(DEB_MOZ_VALGRIND))
	DEB_DEFINES += -DDEB_MOZ_VALGRIND
endif
ifeq (1,$(DEB_NO_OPTIMIZE))
	DEB_DEFINES += -DDEB_NO_OPTIMIZE
endif
ifeq (1, $(USE_SYSTEM_NSPR))
	DEB_DEFINES += -DUSE_SYSTEM_NSPR
	NSPR_DEPENDS = libnspr4-dev
endif
ifeq (1, $(USE_SYSTEM_CAIRO))
	DEB_DEFINES += -DUSE_SYSTEM_CAIRO
	CAIRO_DEPENDS = libcairo2-dev
endif
ifeq (1, $(USE_SYSTEM_SQLITE))
	DEB_DEFINES += -DUSE_SYSTEM_SQLITE
endif
ifeq (1, $(USE_SYSTEM_NSS))
	DEB_DEFINES += -DUSE_SYSTEM_NSS
	NSS_DEPENDS = libnss3-dev
endif
ifeq (1,$(USE_SYSTEM_HUNSPELL))
	DEB_DEFINES += -DUSE_SYSTEM_HUNSPELL
endif
ifeq (1,$(DEB_WANT_UNIT_TESTS))
	DEB_DEFINES += -DDEB_WANT_UNIT_TESTS
endif
ifneq ($(DEB_BUILD_GNU_TYPE),$(DEB_HOST_GNU_TYPE))
	DEB_DEFINES += -DDEB_HOST_GNU_TYPE="$(DEB_HOST_GNU_TYPE)"
endif
ifeq (1,$(DEB_BUILD_PGO))
	DEB_DEFINES += -DDEB_BUILD_PGO
endif
ifeq (1,$(shell test "$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)" -ge "1104" && echo "1"))
	DEB_DEFINES += -DDISABLE_GNOMEVFS
	DEB_DEFINES += -DDISABLE_CONTROL_CENTER
endif
ifneq (,$(MOZ_UPDATE_CHANNEL))
	DEB_DEFINES += -DMOZ_UPDATE_CHANNEL="$(MOZ_UPDATE_CHANNEL)"
endif
ifeq (1,$(DEB_DEBUG))
	DEB_DEFINES += -DDEBUG
endif
ifneq (,$(findstring armel,$(DEB_BUILD_ARCH)))
	DEB_DEFINES += -DDEB_ENABLE_THUMB2
endif
ifeq (,$(findstring i386,$(DEB_BUILD_ARCH)))
ifeq (,$(findstring amd64,$(DEB_BUILD_ARCH)))
ifeq (,$(findstring armel,$(DEB_BUILD_ARCH)))
	DEB_DEFINES += -DDISABLE_ELF_HACK
endif
endif
endif
ifeq (1,$(ENABLE_GLOBALMENU))
	DEB_DEFINES += -DENABLE_GLOBALMENU
endif
ifneq (,$(filter beta official, $(BRANDING)))
	DEB_DEFINES += -DOFFICIAL_BRANDING
endif

DEBIAN_EXECUTABLES = \
	$(DEBIAN_NAME)$(FF_LIBDIR)/firefox.sh \
	$(DEBIAN_NAME)$(FF_LIBDIR)/xulapp-profilemigrator \
	$(NULL)

subst_files = \
	debian/usr.bin.$(DEBIAN_NAME) \
	debian/README.Debian \
	debian/firefox.sh \
	debian/apport/$(DEBIAN_NAME) \
	debian/apport/$(DEBIAN_NAME).py \
	debian/$(DEBIAN_NAME).desktop \
	debian/$(DEBIAN_NAME).xml \
	debian/$(DEBIAN_NAME)-gnome-support.install \
	debian/$(DEBIAN_NAME).dirs \
	debian/$(DEBIAN_NAME).install \
	debian/$(DEBIAN_NAME).links \
	debian/$(DEBIAN_NAME).manpages \
	debian/$(DEBIAN_NAME).menu \
	debian/$(DEBIAN_NAME).postinst \
	debian/$(DEBIAN_NAME).postrm \
	debian/$(DEBIAN_NAME).preinst \
	debian/$(DEBIAN_NAME).prerm \
	debian/$(DEBIAN_NAME).1 \
	debian/$(DEBIAN_NAME)-mozsymbols.install \
	debian/$(DEBIAN_NAME)-dev.install \
	debian/$(DEBIAN_NAME)-dev.links \
	debian/$(DEBIAN_NAME).lintian-overrides \
	debian/$(DEBIAN_NAME)-globalmenu.dirs \
	debian/pkgconfig/$(DEBIAN_NAME)-plugin.pc \
	debian/mozconfig \
	$(NULL)

ifneq (1, $(DEB_MIN_SYSDEPS))
EXTRA_BD = \n\tlibnspr4-dev,\n\tlibnss3-dev,\n\tlibcairo2-dev,\n\tlibsqlite3-dev,\n\tlibpixman-1-dev,\n\tlibjpeg62-dev,\n\tlibpng12-dev,\n\tzlib1g-dev,\n\tlibhunspell-dev,
else
EXTRA_BD = $(NULL)
endif

ifeq (1, $(DEB_SYS_LIBXUL))
EXTRA_BD += \n\txulrunner-2.0,
endif

regen-debian-control::
	sed -e 's/@EXTRA_BD@/$(EXTRA_BD)/g' \
	    -e 's/@APPNAME@/$(DEBIAN_NAME)/g' < debian/control.pp > debian/control

	if [ -f debian/control.langpacks ] ; \
	then \
		printf "\n# Language packs\n" >> debian/control ; \
		sed -e 's/@APPNAME@/$(DEBIAN_NAME)/g' < debian/control.langpacks >> debian/control ; \
	fi

BRANCH	:=
ifneq (,$(DEBIAN_APP_NAME_VER))
	BRANCH = -$(DEBIAN_APP_NAME_VER)
endif
$(subst_files): $(foreach file, $(subst_files), $(subst $(BRANCH),,$(file).in))
	$(PYTHON) $(DEB_BUILDDIR)/config/Preprocessor.py -Fsubstitution --marker="%%" $(DEB_DEFINES) $(CURDIR)/$(subst $(BRANCH),,$@.in) > $(CURDIR)/$@

debian/usr.bin.firefox.in:
	if [ '$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)' -ge '1104' ]; then \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.11.04 $(CURDIR)/debian/usr.bin.firefox.in ; \
	elif [ '$(DISTRIB_VERSION_MAJOR)$(DISTRIB_VERSION_MINOR)' -ge '1010' ]; then \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.10.10 $(CURDIR)/debian/usr.bin.firefox.in ; \
	elif [ "$(DISTRIB_VERSION_MAJOR)" -ge "10" ]; then \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.10.04 $(CURDIR)/debian/usr.bin.firefox.in ; \
	else \
		cp $(CURDIR)/debian/usr.bin.firefox.apparmor.9.10 $(CURDIR)/debian/usr.bin.firefox.in ; \
	fi

debian/stamp-buildsymbols: debian/stamp-makefile-build
ifeq (1, $(DEB_ENABLE_BREAKPAD))
	# create build symbols
	cd $(MOZ_OBJDIR); \
	        $(MAKE) buildsymbols MOZ_SYMBOLS_EXTRA_BUILDID=$(shell date -d "`dpkg-parsechangelog | grep Date: | sed -e 's/^Date: //'`" +%y%m%d%H%M%S)-$(DEB_HOST_GNU_CPU)
endif
	touch $@

compare-locales/scripts/compare-locales:
	cp -r $(CURDIR)/debian/compare-locales $(CURDIR)
	chmod +x $(CURDIR)/compare-locales/scripts/*

build-langpack-xpis: compare-locales/scripts/compare-locales
	if [ -d $(CURDIR)/debian/l10n-mergedirs ] ; \
	then \
		rm -rf $(CURDIR)/debian/l10n-mergedirs ; \
	fi
	mkdir $(CURDIR)/debian/l10n-mergedirs

	export PATH=$(CURDIR)/compare-locales/scripts/:$$PATH ; \
	export PYTHONPATH=$(CURDIR)/compare-locales/lib ; \
	cd $(MOZ_OBJDIR)/browser/locales ; \
	while read line ; \
	do \
		$(MAKE) merge-$$line LOCALE_MERGEDIR=$(CURDIR)/debian/l10n-mergedirs/$$line ; \
		$(MAKE) langpack-$$line LOCALE_MERGEDIR=$(CURDIR)/debian/l10n-mergedirs/$$line ; \
	done < $(CURDIR)/debian/locales-supported

common-build-arch:: build-langpack-xpis debian/stamp-testsuite

common-binary-arch:: debian/stamp-buildsymbols

binary-install/$(DEBIAN_NAME)::
	convert -resize 32x32 debian/$(DEBIAN_NAME)/usr/share/pixmaps/$(DEBIAN_NAME).png debian/$(DEBIAN_NAME)/usr/share/pixmaps/$(DEBIAN_NAME).xpm

ifeq (1, $(ENABLE_GLOBALMENU))
binary-install/$(DEBIAN_NAME)-globalmenu::
	unzip -o -d debian/$(DEBIAN_NAME)-globalmenu$(FF_PREFIX)/lib/$(DEBIAN_NAME)-addons/extensions/globalmenu@ubuntu.com/ $(MOZ_DISTDIR)/xpi-stage/globalmenu.xpi
	find debian/$(DEBIAN_NAME)-globalmenu$(FF_PREFIX)/lib/$(DEBIAN_NAME)-addons/extensions/globalmenu@ubuntu.com/ -type f -executable | xargs chmod -x
endif

ifneq (1, $(DEB_SYS_LIBXUL))
GNOME_SUPPORT_FILES = libmozgnome.so libnkgnomevfs.so

binary-post-install/$(DEBIAN_NAME):: compare
	$(foreach file,$(GNOME_SUPPORT_FILES),rm -fv debian/$(DEBIAN_NAME)/usr/lib/firefox-*/components/$(file);) true
endif

ifneq (1, $(USE_SYSTEM_NSPR))
binary-post-install/$(DEBIAN_NAME)-dev::
	rm -f debian/$(DEBIAN_NAME)-dev$(FF_INCDIR)/nspr/md/_linux.cfg
	dh_link -p$(DEBIAN_NAME)-dev $(FF_INCDIR)/nspr/prcpucfg.h $(FF_INCDIR)/nspr/md/_linux.cfg
endif

common-binary-predeb-arch::
	$(foreach file,$(DEBIAN_EXECUTABLES),chmod a+x debian/$(file);)

ifneq (1, $(DEB_SYS_LIBXUL))
# we want the gnome dependencies not to be in the main package at shlibdeps runtime, hence we dont
# install them at binary-install/* stage, but copy them over _after_ the shlibdeps had been generated
common-binary-predeb-arch::
	$(foreach file,$(GNOME_SUPPORT_FILES),mv debian/$(DEBIAN_NAME)-gnome-support$(FF_LIBDIR)/components/$(file) debian/$(DEBIAN_NAME)$(FF_LIBDIR)/components/;) true
	touch $@
endif

ifneq (1, $(USE_SYSTEM_NSS))
binary-predeb/$(DEBIAN_NAME)::
	$(foreach lib,libsoftokn3.so libfreebl3.so libnssdbm3.so, \
	        LD_LIBRARY_PATH=debian/$(DEBIAN_NAME)$(FF_LIBDIR):$$LD_LIBRARY_PATH \
	        $(MOZ_DISTDIR)/bin/shlibsign -v -i debian/$(DEBIAN_NAME)$(FF_LIBDIR)/$(lib);)
endif

pre-build:: $(subst_files)

	# KDE integration
	cp $(DEB_SRCDIR)/toolkit/content/widgets/dialog.xml $(DEB_SRCDIR)/toolkit/content/widgets/dialog-kde.xml
	cp $(DEB_SRCDIR)/toolkit/content/widgets/preferences.xml $(DEB_SRCDIR)/toolkit/content/widgets/preferences-kde.xml
	cp $(DEB_SRCDIR)/browser/base/content/browser.xul $(DEB_SRCDIR)/browser/base/content/browser-kde.xul
	mkdir -p $(DEB_SRCDIR)/extensions/globalmenu
	(cd debian/globalmenu && tar -cvhf - .) | (cd $(DEB_SRCDIR)/extensions/globalmenu && tar -xf -) 

get-compare-locales:
	mkdir -p compare-locales-tmp
	hg clone http://hg.mozilla.org/build/compare-locales compare-locales-tmp
ifdef HGTAG
	cd compare-locales-tmp; \
		hg update $(HGTAG); \
		printf "TAG=%s" $(HGTAG) > REV
else
	cd compare-locales-tmp; \
		CHANGESET=`hg summary | grep parent | cut -d ' ' -f 2 | cut -d : -f 2`; \
		printf "CHANGESET=%s" $$CHANGESET > REV
endif
	cd  compare-locales-tmp; \
		find . -name *.pyc | xargs rm -f; \
		rm -rf .hg .hgtags .hgignore tests *.py
	rm -rf debian/compare-locales
	mv compare-locales-tmp debian/compare-locales

refresh-supported-languages: apply-patches
	if [ -f debian/locales-supported ] ; \
	then \
		mv debian/locales-supported debian/locales-supported.old ; \
	fi

	rm -f debian/control.langpacks

	printf "# This file is autogenerated. Please don't edit directly\n\n" > debian/locales-supported

	while read line ; \
	do \
		platforms=`echo $$line | sed 's/^\([A-Za-z0-9\-]* \)\(.*\)/\2/'` ; \
		language=`echo $$line | sed 's/^\([A-Za-z0-9\-]*\)\(.*\)/\1/'` ; \
		if [ "x$$language" != "xen-US" ] && ([ "x$$platforms" = "x$$language" ] || `echo $$platforms | grep -q linux`) ; \
		then \
			blacklist=0 ; \
			while read blacklist_entry ; \
			do \
				if [ "x$$blacklist_entry" = "x$$language" ] ; \
				then \
					blacklist=1 ; \
				fi \
			done < debian/locale-blacklist ; \
			mapped= ; \
			while read map_entry ; \
			do \
				if [ "`echo $$map_entry | cut -d ':' -f 1`" = "$$language" ] ; \
				then \
					mapped=`echo $$map_entry | cut -d ':' -f 2` ; \
				fi \
			done < debian/locale-map ; \
			if [ -z "$$mapped" ] ; \
			then \
				mapped="$$language" ; \
			fi ; \
			desc= ; \
			while read desc_entry ; \
			do \
				if [ "`echo $$desc_entry | cut -d ':' -f 1`" = "$$mapped" ] && \
				  [ "`echo $$desc_entry | cut -d ':' -f 1`" != "`echo $$desc_entry | cut -d ':' -f 2`" ] ; \
				then \
					desc=`echo $$desc_entry | cut -d ':' -f 2` ; \
				fi \
			done < debian/locale-descriptions ; \
			if [ -z "$$desc" ] && [ ! -z $(LANGPACK_O_MATIC) ] && [ -f $(LANGPACK_O_MATIC)/maps/languages ] ; \
			then \
				while read desc_entry ; \
				do \
					if [ "`echo $$desc_entry | cut -d ':' -f 1`" = "$$mapped" ] && \
					  [ "`echo $$desc_entry | cut -d ':' -f 1`" != "`echo $$desc_entry | cut -d ':' -f 2`" ] ; \
					then \
						desc=`echo $$desc_entry | cut -d ':' -f 2` ; \
						echo $$mapped:$$desc >> debian/locale-descriptions ; \
					fi \
				done < $(LANGPACK_O_MATIC)/maps/languages ; \
			fi ; \
			if [ -z "$$desc" ] ; \
			then \
				skipped="$$skipped $$language" ; \
			fi ; \
			if [ "$$blacklist" = "0" ] && [ ! -z "$$desc" ] && [ -f $(DEB_BUILDDIR)/l10n/$${language}/toolkit/defines.inc ] ; \
			then \
				echo "$$language" >> debian/locales-supported ; \
				tmp=`echo $$mapped | sed 's/\-/_/'` ; \
				eval b=\$$$$tmp ; \
				if [ -z $$b ] ; \
				then \
					sed -e "s/@LANGCODE@/$$mapped/g" \
					    -e "s/@LANG@/$$desc/g" < debian/control.langpacks.pp >> debian/control.langpacks ; \
					eval $$tmp=1 ; \
				fi \
			fi \
		fi \
	done < $(DEB_BUILDDIR)/browser/locales/shipped-locales ; \
	if [ ! -z "$$skipped" ] ; \
	then \
		echo "" ; \
		echo "These locales could be built but we have no description from them:" $$skipped ; \
		echo "" ; \
	fi

	has_missing=0 ; \
	while read oldline ; \
	do \
		found=0 ; \
		while read newline ; \
		do \
			if [ "$$oldline" = "$$newline" ] ; \
			then \
				found=1 ; \
			fi \
		done < debian/locales-supported ; \
		if [ $$found = 0 ] ; \
		then \
			if [ $$has_missing = 0 ] ; \
			then \
				echo "*** SOME LOCALES ARE MISSING ***" ; \
				has_missing=1 ; \
			fi ; \
			echo "Missing locale" $$oldline ; \
		fi \
	done < debian/locales-supported.old ; \
	if [ $$has_missing = 1 ] && [ -z $(IGNORE_MISSING) ] ; \
	then \
		mv debian/locales-supported.old debian/locales-supported ; \
		exit 1 ; \
	fi

	rm -f debian/locales-supported.old

clean:: regen-debian-control
	rm -f $(subst_files)
	rm -f debian/usr.bin.firefox.in
	rm -f debian/stamp-*
	rm -rf debian/l10n-mergedirs
	rm -rf compare-locales
